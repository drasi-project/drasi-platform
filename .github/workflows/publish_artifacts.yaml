name: Publish Artifacts

on:
  workflow_dispatch:

permissions:
  id-token: write # Required for requesting the JWT
  contents: read  # Required for actions/checkout
  packages: write

env:
  RELEASE_PATH: ./release
  RELEASE_VERSION: 0.1.0 # Setting release version to 0.1.0 for now

jobs:
  build-cli:
    runs-on: ubuntu-latest
    if: github.repository == 'drasi-project/drasi-platform'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        working-directory: cli
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli
          path: cli/bin
    
  publish_CLI:
    if: github.repository == 'drasi-project/drasi-platform'
    needs: build-cli
    runs-on: ubuntu-latest
    name: Publish ${{ matrix.os }}_${{ matrix.arch }} binaries
    environment: 
      name: github-actions
    strategy:
      matrix:
        include:
          - os: linux
            arch: arm64
          - os: linux
            arch: x64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: x64
          - os: windows
            arch: x64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download binaries
        uses: actions/download-artifact@v4
      - name: Copy cli binaries to release (non-windows)
        if: matrix.os != 'windows'
        run: |
          mkdir -p ${{ env.RELEASE_PATH}}/cli/${{ matrix.os }}-${{ matrix.arch }}/
          cp -r cli/${{ matrix.os }}-${{ matrix.arch }}/drasi ${{ env.RELEASE_PATH}}/drasi-${{ matrix.os }}-${{ matrix.arch }}
      - name: Copy cli binaries to release (non-windows)
        if: matrix.os == 'windows'
        run: |
          mkdir -p ${{ env.RELEASE_PATH}}/cli/${{ matrix.os }}-${{ matrix.arch }}/
          cp -r cli/${{ matrix.os }}-${{ matrix.arch }}/drasi.exe ${{ env.RELEASE_PATH}}/drasi-${{ matrix.os }}-${{ matrix.arch }}.exe
      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: drasi_${{ matrix.os }}_${{ matrix.arch }}
          path: ${{ env.RELEASE_PATH}}

  vscode_extension:
    if: github.repository == 'drasi-project/drasi-platform'
    name: Build and publish the VSCode vscode_extension
    runs-on: ubuntu-latest
    environment: 
      name: github-actions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Building the extension
        run: |
          cd dev-tools/vscode/drasi
          npm install -g @vscode/vsce 
          npm install
          vsce package
      - name: Copy the extension to release
        run: |
          mkdir -p ${{ env.RELEASE_PATH}}/vscode-extension/
          cp dev-tools/vscode/drasi/drasi-0.0.3.vsix ${{ env.RELEASE_PATH}}/drasi-0.0.3.vsix
      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: drasi_vscode_extension
          path: ${{ env.RELEASE_PATH}}

  release:
    if: github.repository == 'drasi-project/drasi-platform'
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: Github release
    needs:
      - vscode_extension
      - publish_CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Download release
        uses: actions/download-artifact@v4
        with:
          pattern: drasi_*
          merge-multiple: true
          path: ${{ env.RELEASE_PATH }}
      - name: Download release
        uses: actions/download-artifact@v4
        with:
          name: drasi_vscode_extension
          merge-multiple: true
          path: ${{ env.RELEASE_PATH }}

      - name: Github release
        run: |
          gh release create v${{ env.RELEASE_VERSION }} ${{ env.RELEASE_PATH }}/* --title v${{ env.RELEASE_VERSION }}