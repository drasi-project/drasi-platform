"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSuspendable = exports.getActionSummary = exports.getNewEventSummary = exports.getMethodNameForAction = exports.getWrongActionNameError = exports.getWrongActionTypeError = exports.getNonDeterminismError = void 0;
const non_determinism_error_1 = require("../task/exception/non-determinism-error");
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const enum_util_1 = require("../utils/enum.util");
function getNonDeterminismError(taskId, actionName) {
    return new non_determinism_error_1.NonDeterminismError(`A previous execution called ${actionName} with ID=${taskId} but the current execution doesn't have this action with this ID. This problem occurs when either the orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running`);
}
exports.getNonDeterminismError = getNonDeterminismError;
function getWrongActionTypeError(taskId, expectedMethodName, action) {
    const unexpectedMethodName = getMethodNameForAction(action);
    console.log("getWrongActionTypeError");
    return new non_determinism_error_1.NonDeterminismError(`Failed to restore orchestration state due to a history mismatch: A previous execution called ${expectedMethodName} with ID=${taskId}, but the current execution is instead trying to call ${unexpectedMethodName} as part of rebuilding it's history. This kind of mismatch can happen if an orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running.`);
}
exports.getWrongActionTypeError = getWrongActionTypeError;
function getWrongActionNameError(taskId, methodName, expectedTaskName, actualTaskName) {
    return new non_determinism_error_1.NonDeterminismError(`Failed to restore orchestration state due to a history mismatch: A previous execution called ${methodName} with name='${expectedTaskName}' and sequence number ${taskId}, but the current execution is instead trying to call ${actualTaskName} as part of rebuilding it's history. This kind of mismatch can happen if an orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running.`);
}
exports.getWrongActionNameError = getWrongActionNameError;
function getMethodNameForAction(action) {
    const actionType = action.getOrchestratoractiontypeCase();
    // What we think is easy is not that easy in Typescript
    // it is not javascript, but typescript that implements methods as abstract
    // this means that we cannot just get the name of the method from the prototype
    // instead, we hardcode them here
    switch (actionType) {
        case pb.OrchestratorAction.OrchestratoractiontypeCase.SCHEDULETASK:
            return "callActivity";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.CREATETIMER:
            return "createTimer";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.CREATESUBORCHESTRATION:
            return "callSubOrchestrator";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.COMPLETEORCHESTRATION:
            return "completeOrchestration";
        default:
            throw new Error(`Unknown action type: ${actionType}`);
    }
}
exports.getMethodNameForAction = getMethodNameForAction;
function getNewEventSummary(newEvents) {
    if (!newEvents?.length) {
        return "[]";
    }
    else if (newEvents.length == 1) {
        const enumKey = (0, enum_util_1.enumValueToKey)(pb.HistoryEvent.EventtypeCase, newEvents[0].getEventtypeCase());
        return `[${enumKey}]`;
    }
    else {
        const counts = new Map();
        for (const event of newEvents) {
            const eventTypeName = (0, enum_util_1.enumValueToKey)(pb.HistoryEvent.EventtypeCase, event.getEventtypeCase()) ?? "UNKNOWN";
            const count = counts.get(eventTypeName) ?? 0;
            counts.set(eventTypeName, count + 1);
        }
        return `[${Array.from(counts.entries())
            .map(([name, count]) => `${name}=${count}`)
            .join(", ")}]`;
    }
}
exports.getNewEventSummary = getNewEventSummary;
/**
 * Returns a summary of the new actions that can be used for logging
 * @param newActions
 */
function getActionSummary(newActions) {
    if (!newActions?.length) {
        return "[]";
    }
    else if (newActions.length == 1) {
        const actionType = newActions[0].getOrchestratoractiontypeCase();
        const actionTypeName = (0, enum_util_1.enumValueToKey)(pb.OrchestratorAction.OrchestratoractiontypeCase, actionType) ?? "UNKNOWN";
        return actionTypeName;
    }
    else {
        const counts = new Map();
        for (const action of newActions) {
            const actionType = action.getOrchestratoractiontypeCase();
            const actionTypeName = (0, enum_util_1.enumValueToKey)(pb.OrchestratorAction.OrchestratoractiontypeCase, actionType) ?? "UNKNOWN";
            const count = counts.get(actionTypeName) ?? 0;
            counts.set(actionTypeName, count + 1);
        }
        return `[${Array.from(counts.entries())
            .map(([name, count]) => `${name}=${count}`)
            .join(", ")}]`;
    }
}
exports.getActionSummary = getActionSummary;
/**
 * Returns true of the event is one that can be suspended and resumed
 * @param event
 */
function isSuspendable(event) {
    return ([pb.HistoryEvent.EventtypeCase.EXECUTIONRESUMED, pb.HistoryEvent.EventtypeCase.EXECUTIONTERMINATED].indexOf(event.getEventtypeCase()) == -1);
}
exports.isSuspendable = isSuspendable;
