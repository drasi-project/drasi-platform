"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcClient = void 0;
const stubs = __importStar(require("../proto/orchestrator_service_grpc_pb"));
const grpc = __importStar(require("@grpc/grpc-js"));
class GrpcClient {
    constructor(hostAddress = "localhost:4001", options = {}, useTLS = false) {
        this._hostAddress = hostAddress;
        this._tls = useTLS;
        this._options = this._generateChannelOptions(options);
        this._stub = this._generateClient();
    }
    get stub() {
        return this._stub;
    }
    _generateClient() {
        const channelCreds = this._generateCredentials();
        return new stubs.TaskHubSidecarServiceClient(this._hostAddress, channelCreds, this._options);
    }
    _generateCredentials() {
        if (this._tls) {
            return grpc.ChannelCredentials.createSsl();
        }
        return grpc.ChannelCredentials.createInsecure();
    }
    _generateChannelOptions(options = {}) {
        const defaultOptions = {
            "grpc.max_receive_message_length": -1,
            "grpc.max_send_message_length": -1,
            "grpc.primary_user_agent": "durabletask-js",
        };
        return {
            ...options,
            ...defaultOptions,
        };
    }
}
exports.GrpcClient = GrpcClient;
