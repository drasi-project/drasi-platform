"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeHttp = exports.serializeGrpc = void 0;
const Client_util_1 = require("./Client.util");
/**
 * Serialize data for gRPC requests.
 * If no content type is provided, it will be inferred from the data.
 * @param data data to serialize
 * @param inContentType content type of the data
 * @returns serialized data and content type
 */
function serializeGrpc(data, inContentType) {
    let serializedData = data;
    const contentType = inContentType ?? (0, Client_util_1.getContentType)(data);
    switch (contentType) {
        case "application/json":
        case "application/cloudevents+json":
            serializedData = Buffer.from(JSON.stringify(data));
            break;
        case "text/plain":
            serializedData = Buffer.from(data.toString());
            break;
        case "application/octet-stream":
        default:
            serializedData = Buffer.from(data);
            break;
    }
    return { serializedData, contentType };
}
exports.serializeGrpc = serializeGrpc;
/**
 * Serialize data for HTTP requests.
 * If no content type is provided, it will be inferred from the data.
 * @param data data to serialize
 * @param inContentType content type of the data
 * @returns serialized data and content type
 */
function serializeHttp(data, inContentType) {
    let serializedData;
    const contentType = inContentType ?? (0, Client_util_1.getContentType)(data);
    switch (contentType) {
        case "application/json":
        case "application/cloudevents+json":
            serializedData = JSON.stringify(data);
            break;
        case "text/plain":
            serializedData = data.toString();
            break;
        case "application/octet-stream":
        default:
            serializedData = data;
            break;
    }
    return { serializedData, contentType };
}
exports.serializeHttp = serializeHttp;
