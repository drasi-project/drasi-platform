"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommunicationProtocol_enum_1 = __importDefault(require("../../enum/CommunicationProtocol.enum"));
const GRPCServer_1 = __importDefault(require("./GRPCServer/GRPCServer"));
const pubsub_1 = __importDefault(require("./GRPCServer/pubsub"));
const binding_1 = __importDefault(require("./GRPCServer/binding"));
const invoker_1 = __importDefault(require("./GRPCServer/invoker"));
const actor_1 = __importDefault(require("./GRPCServer/actor"));
const HTTPServer_1 = __importDefault(require("./HTTPServer/HTTPServer"));
const pubsub_2 = __importDefault(require("./HTTPServer/pubsub"));
const binding_2 = __importDefault(require("./HTTPServer/binding"));
const invoker_2 = __importDefault(require("./HTTPServer/invoker"));
const actor_2 = __importDefault(require("./HTTPServer/actor"));
const Settings_util_1 = require("../../utils/Settings.util");
const DaprClient_1 = __importDefault(require("../Client/DaprClient"));
const Client_util_1 = require("../../utils/Client.util");
class DaprServer {
    constructor(serverOptions = {}) {
        const communicationProtocol = serverOptions.communicationProtocol ?? Settings_util_1.Settings.getDefaultCommunicationProtocol();
        const clientOptions = (0, Client_util_1.getClientOptions)(serverOptions.clientOptions, communicationProtocol, serverOptions?.logger);
        // Legacy validation on port
        // URI validation is done later, when we instantiate the HttpEndpoint or GrpcEndpoint
        // object in the HttpClient or GrpcClient constructor, but we need to
        // keep this additional check for backward compatibility
        // TODO: Remove this validation in the next major version
        if (clientOptions?.daprPort && !/^[0-9]+$/.test(clientOptions?.daprPort)) {
            throw new Error("DAPR_INCORRECT_SIDECAR_PORT");
        }
        this.client = new DaprClient_1.default(clientOptions);
        this.serverOptions = {
            serverHost: serverOptions.serverHost ?? Settings_util_1.Settings.getDefaultHost(),
            serverPort: serverOptions.serverPort ?? Settings_util_1.Settings.getDefaultAppPort(communicationProtocol),
            communicationProtocol: communicationProtocol,
            maxBodySizeMb: serverOptions.maxBodySizeMb,
            serverHttp: serverOptions.serverHttp,
            clientOptions: this.client.options,
            logger: serverOptions.logger,
        };
        // Create a client to interface with the sidecar from the server side
        // If DAPR_SERVER_PORT was not set, we set it
        process.env.DAPR_SERVER_PORT = this.serverOptions.serverPort;
        process.env.DAPR_CLIENT_PORT = this.client.options.daprPort;
        // Validation on port
        if (!/^[0-9]+$/.test(this.serverOptions.serverPort)) {
            throw new Error("DAPR_INCORRECT_SERVER_PORT");
        }
        // Builder
        switch (serverOptions.communicationProtocol) {
            case CommunicationProtocol_enum_1.default.GRPC: {
                const server = new GRPCServer_1.default(this.client, this.serverOptions);
                this.daprServer = server;
                this.pubsub = new pubsub_1.default(server);
                this.binding = new binding_1.default(server);
                this.invoker = new invoker_1.default(server);
                this.actor = new actor_1.default(server);
                break;
            }
            case CommunicationProtocol_enum_1.default.HTTP:
            default: {
                const server = new HTTPServer_1.default(this.client, this.serverOptions);
                this.daprServer = server;
                this.pubsub = new pubsub_2.default(server);
                this.binding = new binding_2.default(server);
                this.invoker = new invoker_2.default(server);
                this.actor = new actor_2.default(server, this.client);
                break;
            }
        }
    }
    async start() {
        // First start the server as we need to initialize routes for PubSub, Bindings, ...
        await this.daprServer.start(this.serverOptions.serverHost, this.serverOptions.serverPort.toString());
        // Ensure our sidecar starts and the client is ready
        await this.client.start();
    }
    async stop() {
        await this.daprServer.stop();
    }
    getDaprClient() {
        return this.daprServer;
    }
}
exports.default = DaprServer;
