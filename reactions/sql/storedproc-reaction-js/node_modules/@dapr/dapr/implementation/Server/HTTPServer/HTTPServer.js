"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const HTTPServerImpl_1 = __importDefault(require("./HTTPServerImpl"));
const http_terminator_1 = require("http-terminator");
const Logger_1 = require("../../../logger/Logger");
class HTTPServer {
    constructor(client, options) {
        this.serverHost = "";
        this.serverPort = "";
        this.serverOptions = options;
        this.client = client;
        this.logger = new Logger_1.Logger("HTTPServer", "HTTPServer", client.options.logger);
        this.isInitialized = false;
        this.server = options.serverHttp ?? (0, express_1.default)();
        this.server.use(body_parser_1.default.text({
            limit: `${this.serverOptions?.maxBodySizeMb ?? 4}mb`,
        }));
        this.server.use(body_parser_1.default.raw({
            type: ["application/octet-stream"],
            limit: `${this.serverOptions?.maxBodySizeMb ?? 4}mb`,
        }));
        this.server.use(body_parser_1.default.json({
            type: [
                "application/json",
                // Support cloudevents
                // https://github.com/cloudevents/spec/blob/v1.0.1/json-format.md
                "application/cloudevents+json",
                "application/*+json",
            ],
            limit: `${this.serverOptions?.maxBodySizeMb ?? 4}mb`,
        }));
        this.serverImpl = new HTTPServerImpl_1.default(this.server, client.options.logger);
        this.serverAddress = "";
    }
    getServerAddress() {
        if (!this.isInitialized) {
            throw new Error(JSON.stringify({
                error: "HTTP_SERVER_NOT_INITIALIZED",
                error_message: "The HTTP server was not initialized, did you call `await HTTPServerSingleton.initialize()`?",
            }));
        }
        return this.serverAddress;
    }
    getServer() {
        return this.server;
    }
    getServerPort() {
        return this.serverPort;
    }
    getServerHost() {
        return this.serverHost;
    }
    // We allow this, since this will register the routes and handlers!
    getServerImpl() {
        return this.serverImpl;
    }
    async start(host, port) {
        this.serverHost = host;
        this.serverPort = port;
        // Initialize Server Listener
        this.serverInstance = await this.server.listen(parseInt(port, 10));
        this.logger.info(`Listening on ${port}`);
        this.serverAddress = `http://${host}:${port}`;
        // Create a terminator, as using a normal server.close() will not close the server immediately,
        // but wait for all connections to close.
        this.serverTerminator = (0, http_terminator_1.createHttpTerminator)({ server: this.serverInstance });
        // Add PubSub Routes
        this.logger.info(`Registering ${Object.keys(this.serverImpl.getSubscriptions()).length} PubSub Subscriptions`);
        this.server.get("/dapr/subscribe", (req, res) => {
            res.send(this.serverImpl.generateDaprPubSubSubscriptionList());
            this.logger.info(`Registered ${Object.keys(this.serverImpl.getSubscriptions()).length} PubSub Subscriptions`);
        });
        this.isInitialized = true;
    }
    async stop() {
        if (this.serverTerminator) {
            await this.serverTerminator.terminate();
        }
        this.isInitialized = false;
    }
}
exports.default = HTTPServer;
