"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ActorRuntime_1 = __importDefault(require("../../../actors/runtime/ActorRuntime"));
const BufferSerializer_1 = __importDefault(require("../../../actors/runtime/BufferSerializer"));
const Logger_1 = require("../../../logger/Logger");
const Actors_util_1 = require("../../../utils/Actors.util");
const HttpStatusCode_enum_1 = __importDefault(require("../../../enum/HttpStatusCode.enum"));
// https://docs.dapr.io/reference/api/bindings_api/
class HTTPServerActor {
    constructor(server, client) {
        this.client = client;
        this.server = server;
        this.logger = new Logger_1.Logger("HTTPServer", "Actors", client.options.logger);
        this.serializer = new BufferSerializer_1.default();
    }
    // async deactivateActor(actorType: string, actorId: string): Promise<void> {
    //   await this.client.execute(`http://localhost:${this.server.serverPort}/actors/${actorType}/${actorId}`, { method: "DELETE" });
    //   await this.client
    // }
    async registerActor(cls) {
        ActorRuntime_1.default.getInstance(this.client.daprClient).registerActor(cls);
    }
    async getRegisteredActors() {
        return await ActorRuntime_1.default.getInstance(this.client.daprClient).getRegisteredActorTypes();
    }
    /**
     * Initialize actors in the HTTP Server
     * This will create the routes that get invoked by the Dapr Sidecar
     */
    async init() {
        this.logger.info("Initializing Actors");
        // Probes the application for a response to state that the app is healthy and running
        // https://docs.dapr.io/reference/api/actors_api/#health-check
        this.server.getServer().get("/healthz", this.handlerHealth.bind(this));
        // https://docs.dapr.io/reference/api/actors_api/#get-registered-actors
        this.server.getServer().get("/dapr/config", this.handlerConfig.bind(this));
        this.server.getServer().delete("/actors/:actorTypeName/:actorId", this.handlerDeactivate.bind(this));
        this.server.getServer().put("/actors/:actorTypeName/:actorId/method/:methodName", this.handlerMethod.bind(this));
        this.server
            .getServer()
            .put("/actors/:actorTypeName/:actorId/method/timer/:timerName", this.handlerTimer.bind(this));
        this.server
            .getServer()
            .put("/actors/:actorTypeName/:actorId/method/remind/:reminderName", this.handlerReminder.bind(this));
    }
    async handlerHealth(_req, res) {
        return res.send("ok");
    }
    async handlerConfig(_req, res) {
        const actorRuntime = ActorRuntime_1.default.getInstance(this.client.daprClient);
        return res.send((0, Actors_util_1.getRegisteredActorResponse)(actorRuntime.getRegisteredActorTypes(), actorRuntime.getActorRuntimeOptions()));
    }
    async handlerDeactivate(req, res) {
        const { actorTypeName, actorId } = req.params;
        const result = await ActorRuntime_1.default.getInstance(this.client.daprClient).deactivate(actorTypeName, actorId);
        res.statusCode = HttpStatusCode_enum_1.default.OK;
        return this.handleResult(res, result);
    }
    async handlerMethod(req, res) {
        const { actorTypeName, actorId, methodName } = req.params;
        const body = req.body;
        // @todo: reentrancy id? (https://github.com/dapr/python-sdk/blob/master/ext/flask_dapr/flask_dapr/actor.py#L91)
        const dataSerialized = this.serializer.serialize(body);
        try {
            const result = await ActorRuntime_1.default.getInstance(this.client.daprClient).invoke(actorTypeName, actorId, methodName, dataSerialized);
            res.statusCode = HttpStatusCode_enum_1.default.OK;
            return this.handleResult(res, result);
        }
        catch (err) {
            if (err instanceof Error) {
                res.statusCode = HttpStatusCode_enum_1.default.INTERNAL_SERVER_ERROR;
            }
            return this.handleResult(res, err);
        }
    }
    async handlerTimer(req, res) {
        const { actorTypeName, actorId, timerName } = req.params;
        const body = req.body;
        const dataSerialized = this.serializer.serialize(body);
        const result = await ActorRuntime_1.default.getInstance(this.client.daprClient).fireTimer(actorTypeName, actorId, timerName, dataSerialized);
        return res.status(200).send(result);
    }
    async handlerReminder(req, res) {
        const { actorTypeName, actorId, reminderName } = req.params;
        const body = req.body;
        const dataSerialized = this.serializer.serialize(body);
        const result = await ActorRuntime_1.default.getInstance(this.client.daprClient).fireReminder(actorTypeName, actorId, reminderName, dataSerialized);
        return res.status(200).send(result);
    }
    handleResult(res, result) {
        if (result && typeof result === "object") {
            return res.status(res.statusCode).send(result);
        }
        else {
            return res.status(res.statusCode).send(`${result}`);
        }
    }
}
exports.default = HTTPServerActor;
