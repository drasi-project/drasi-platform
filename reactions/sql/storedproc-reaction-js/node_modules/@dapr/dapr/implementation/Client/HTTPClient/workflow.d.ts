import HTTPClient from "./HTTPClient";
import IClientWorkflow from "../../../interfaces/Client/IClientWorkflow";
import { WorkflowGetResponseType } from "../../../types/workflow/WorkflowGetResponse.type";
import { WorkflowStartOptions } from "../../../types/workflow/WorkflowStartOptions.type";
import { WorkflowRaiseOptions } from "../../../types/workflow/WorkflowRaiseOptions.type";
export default class HTTPClientWorkflow implements IClientWorkflow {
    private readonly client;
    private readonly logger;
    private static readonly DEFAULT_WORKFLOW_COMPONENT;
    constructor(client: HTTPClient);
    get(instanceID: string, workflowComponent?: string): Promise<WorkflowGetResponseType>;
    start(workflowName: string, input?: any, instanceId?: string | undefined, workflowComponent?: string | undefined, options?: WorkflowStartOptions): Promise<string>;
    raise(instanceId: string, eventName: string, eventData?: any, workflowComponent?: string | undefined, options?: WorkflowRaiseOptions): Promise<void>;
    terminate(instanceId: string, workflowComponent?: string | undefined): Promise<void>;
    pause(instanceId: string, workflowComponent?: string | undefined): Promise<void>;
    resume(instanceId: string, workflowComponent?: string | undefined): Promise<void>;
    purge(instanceId: string, workflowComponent?: string | undefined): Promise<void>;
    _invokeMethod(instanceId: string, method: string, workflowComponent?: string | undefined): Promise<any>;
}
