"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const common_pb_1 = require("../../../proto/dapr/proto/common/v1/common_pb");
const Map_util_1 = require("../../../utils/Map.util");
const Settings_util_1 = require("../../../utils/Settings.util");
const Client_util_1 = require("../../../utils/Client.util");
// https://docs.dapr.io/reference/api/state_api/
class GRPCClientState {
    constructor(client) {
        this.client = client;
    }
    async save(storeName, stateObjects, options = {}) {
        const stateList = [];
        for (const stateObject of stateObjects) {
            const si = new common_pb_1.StateItem();
            si.setKey(stateObject.key);
            si.setValue(Buffer.from(typeof stateObject.value === "object" ? JSON.stringify(stateObject.value) : stateObject.value.toString(), "utf-8"));
            if (stateObject?.etag) {
                const etag = new common_pb_1.Etag();
                etag.setValue(stateObject.etag);
                si.setEtag(etag);
            }
            si.setOptions(this._configureStateOptions(stateObject?.options));
            // Merge metadata from stateObject and options.
            // Note, metadata from options will override metadata from stateObject.
            // See https://github.com/dapr/dapr/blob/029ec8cb7a1c88ec5d222bc2b0d1d53541217f19/pkg/http/api.go#L1525-L1532
            (0, Client_util_1.addMetadataToMap)(si.getMetadataMap(), stateObject.metadata);
            (0, Client_util_1.addMetadataToMap)(si.getMetadataMap(), options.metadata);
            stateList.push(si);
        }
        const msgService = new dapr_pb_1.SaveStateRequest();
        msgService.setStoreName(storeName);
        msgService.setStatesList(stateList);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.saveState(msgService, (err, _res) => {
                if (err) {
                    return reject({ error: err });
                }
                // https://docs.dapr.io/reference/api/state_api/#response-body
                return resolve({});
            });
        });
    }
    async get(storeName, key, options) {
        const msgService = new dapr_pb_1.GetStateRequest();
        msgService.setStoreName(storeName);
        msgService.setKey(key);
        if (options?.consistency) {
            msgService.setConsistency(options.consistency);
        }
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.getState(msgService, (err, res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/state_api/#http-response-1
                const resData = Buffer.from(res.getData()).toString();
                try {
                    const json = JSON.parse(resData);
                    return resolve(json);
                }
                catch (e) {
                    return resolve(resData);
                }
            });
        });
    }
    async getBulk(storeName, keys, options = {}) {
        const msgService = new dapr_pb_1.GetBulkStateRequest();
        msgService.setStoreName(storeName);
        msgService.setKeysList(keys);
        msgService.setParallelism(options.parallelism ?? Settings_util_1.Settings.getDefaultStateGetBulkParallelism());
        // @todo: https://docs.dapr.io/reference/api/state_api/#optional-behaviors
        // msgService.setConsistency()
        (0, Client_util_1.addMetadataToMap)(msgService.getMetadataMap(), options.metadata);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.getBulkState(msgService, (err, res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/state_api/#http-response-2
                const items = res.getItemsList();
                return resolve(items.map((i) => {
                    const resDataStr = Buffer.from(i.getData()).toString();
                    let data;
                    try {
                        data = JSON.parse(resDataStr);
                    }
                    catch (e) {
                        data = resDataStr;
                    }
                    return {
                        key: i.getKey(),
                        data,
                        etag: i.getEtag(),
                    };
                }));
            });
        });
    }
    async delete(storeName, key, options) {
        const msgService = new dapr_pb_1.DeleteStateRequest();
        msgService.setStoreName(storeName);
        msgService.setKey(key);
        if (options?.etag) {
            const etag = new common_pb_1.Etag();
            etag.setValue(options.etag);
            msgService.setEtag(etag);
        }
        msgService.setOptions(this._configureStateOptions(options));
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.deleteState(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/state_api/#http-response-3
                return resolve({});
            });
        });
    }
    async transaction(storeName, operations = [], metadata = null) {
        const transactionItems = [];
        for (const o of operations) {
            const si = new common_pb_1.StateItem();
            si.setKey(o.request.key);
            si.setValue(Buffer.from(o.request.value || "", "utf-8"));
            if (o.request.etag) {
                const etag = new common_pb_1.Etag();
                etag.setValue(o.request.etag.toString());
                si.setEtag(etag);
            }
            si.setOptions(this._configureStateOptions(o.request?.options));
            const transactionItem = new dapr_pb_1.TransactionalStateOperation();
            transactionItem.setOperationtype(o.operation);
            transactionItem.setRequest(si);
            transactionItems.push(transactionItem);
        }
        const msgService = new dapr_pb_1.ExecuteStateTransactionRequest();
        msgService.setStorename(storeName);
        msgService.setOperationsList(transactionItems);
        if (metadata) {
            (0, Map_util_1.merge)(msgService.getMetadataMap(), metadata);
        }
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.executeStateTransaction(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/state_api/#request-body-1
                return resolve();
            });
        });
    }
    async query(storeName, query) {
        const msgService = new dapr_pb_1.QueryStateRequest();
        msgService.setStoreName(storeName);
        msgService.setQuery(JSON.stringify(query));
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.queryStateAlpha1(msgService, (err, res) => {
                if (err) {
                    return reject(err);
                }
                const resultsList = res.getResultsList();
                if (resultsList.length === 0) {
                    return resolve({
                        results: [],
                        token: res.getToken(),
                    });
                }
                // https://docs.dapr.io/reference/api/state_api/#response-body
                // map the res from gRPC
                const resMapped = {
                    results: res.getResultsList().map((i) => ({
                        key: i.getKey(),
                        data: i.getData(),
                        etag: i.getEtag(),
                        error: i.getError(),
                    })),
                    token: res.getToken(),
                };
                return resolve(resMapped);
            });
        });
    }
    _configureStateOptions(opt) {
        if (opt === undefined) {
            return undefined;
        }
        const stateOptions = new common_pb_1.StateOptions();
        if (opt?.consistency) {
            stateOptions.setConsistency(opt.consistency);
        }
        if (opt?.concurrency) {
            stateOptions.setConcurrency(opt.concurrency);
        }
        return stateOptions;
    }
}
exports.default = GRPCClientState;
