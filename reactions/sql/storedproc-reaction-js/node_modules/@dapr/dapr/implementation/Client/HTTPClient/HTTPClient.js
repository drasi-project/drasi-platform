"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const __1 = require("../../..");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const Settings_util_1 = require("../../../utils/Settings.util");
const Logger_1 = require("../../../logger/Logger");
const sidecar_1 = __importDefault(require("./sidecar"));
const version_1 = require("../../../version");
const SerializerUtil = __importStar(require("../../../utils/Serializer.util"));
const CommunicationProtocol_enum_1 = __importDefault(require("../../../enum/CommunicationProtocol.enum"));
const HttpEndpoint_1 = require("../../../network/HttpEndpoint");
class HTTPClient {
    constructor(options) {
        this.daprEndpoint = this.generateEndpoint(options);
        this.options = {
            daprHost: this.daprEndpoint.hostname,
            daprPort: this.daprEndpoint.port,
            communicationProtocol: CommunicationProtocol_enum_1.default.HTTP,
            isKeepAlive: options?.isKeepAlive,
            logger: options?.logger,
            actor: options?.actor,
            daprApiToken: options?.daprApiToken,
            maxBodySizeMb: options?.maxBodySizeMb,
        };
        this.logger = new Logger_1.Logger("HTTPClient", "HTTPClient", this.options.logger);
        this.isInitialized = false;
        this.clientUrl = `${this.daprEndpoint.endpoint}/v1.0`;
        if (!HTTPClient.client) {
            HTTPClient.client = node_fetch_1.default;
        }
        // Add a custom agent so we can decide if we want to reuse connections or not
        // we use an agent so we can reuse an open connection, limiting handshake requirements
        // Note: when using an agent, we will encounter TCPWRAP since the connection doesn't get destroyed
        const keepAlive = this.options.isKeepAlive ?? Settings_util_1.Settings.getDefaultKeepAlive();
        const keepAliveMsecs = 30 * 1000; // it is applicable only when keepAlive is set to true
        if (!HTTPClient.httpAgent) {
            HTTPClient.httpAgent = new http_1.default.Agent({ keepAlive: keepAlive, keepAliveMsecs: keepAliveMsecs });
        }
        if (!HTTPClient.httpsAgent) {
            HTTPClient.httpsAgent = new https_1.default.Agent({ keepAlive: keepAlive, keepAliveMsecs: keepAliveMsecs });
        }
    }
    generateEndpoint(options) {
        const host = options?.daprHost ?? Settings_util_1.Settings.getDefaultHost();
        const port = options?.daprPort ?? Settings_util_1.Settings.getDefaultHttpPort();
        let uri = `${host}:${port}`;
        if (!(options?.daprHost || options?.daprPort)) {
            // If neither host nor port are specified, check the endpoint environment variable.
            const endpoint = Settings_util_1.Settings.getDefaultHttpEndpoint();
            if (endpoint != "") {
                uri = endpoint;
            }
        }
        return new HttpEndpoint_1.HttpEndpoint(uri);
    }
    async getClient(requiresInitialization = true) {
        // Ensure the sidecar has been started
        if (requiresInitialization && !this.isInitialized) {
            this.logger.verbose("Client is not initialized, starting sidecar and initializing");
            await this.start();
        }
        return HTTPClient.client;
    }
    setIsInitialized(isInitialized) {
        this.isInitialized = isInitialized;
    }
    getIsInitialized() {
        return this.isInitialized;
    }
    async _startAwaitSidecarStarted() {
        await __1.DaprClient.awaitSidecarStarted(async () => await sidecar_1.default.isStarted(this), this.logger);
    }
    async stop() {
        HTTPClient.httpAgent.destroy();
        HTTPClient.httpsAgent.destroy();
    }
    async start() {
        await this._startAwaitSidecarStarted();
        this.isInitialized = true;
        this.logger.info("Sidecar Started");
        return;
    }
    async executeWithApiVersion(apiVersion = "v1.0", url, params = {}) {
        const newClientUrl = this.clientUrl.replace("v1.0", apiVersion);
        return await this.execute(`${newClientUrl}${url}`, params);
    }
    /**
     *
     * @param url The URL to call
     * @param params The parameters to pass to our URL
     * @param requiresInitialization If false, it doesn't require the Dapr sidecar to be started and might fail
     * @returns The result of the call
     */
    async execute(url, params, requiresInitialization = true) {
        const clientOptions = {};
        // Set Method
        clientOptions.method = params?.method.toLocaleUpperCase() || (params?.body ? "POST" : "GET");
        // Set Headers
        clientOptions.headers = params?.headers ?? {};
        if (this.options.daprApiToken) {
            clientOptions.headers["dapr-api-token"] = this.options.daprApiToken;
        }
        clientOptions.headers["user-agent"] = `dapr-sdk-js/v${version_1.SDK_VERSION} http/1`;
        // Set Body and Content-Type Header
        if (params?.body) {
            // If content-type is already present, use that to serialize the data.
            const headerContentType = params?.headers?.["Content-Type"] ?? undefined;
            const { serializedData, contentType } = SerializerUtil.serializeHttp(params?.body, headerContentType);
            clientOptions.headers["Content-Type"] = contentType;
            clientOptions.body = serializedData;
        }
        const urlFull = url.startsWith("http") ? url : `${this.clientUrl}${url}`;
        const agent = urlFull.startsWith("https") ? HTTPClient.httpsAgent : HTTPClient.httpAgent;
        clientOptions.agent = agent;
        this.logger.debug(`Fetching ${clientOptions.method} ${urlFull} with (headers: ${JSON.stringify(clientOptions.headers)}, body size: ${(clientOptions.body?.toString()?.length ?? 0) / 1024 / 1024} Mb)`);
        const client = await this.getClient(requiresInitialization);
        const res = await client(urlFull, clientOptions);
        // Parse body
        const txt = await res.text();
        let txtParsed;
        try {
            txtParsed = JSON.parse(txt);
        }
        catch (e) {
            txtParsed = txt;
        }
        // 2XX -> OK; 3XX -> Redirects and Found
        if (res.status >= 200 && res.status <= 399) {
            return txtParsed;
        }
        else {
            throw new Error(JSON.stringify({
                error: res.statusText,
                error_msg: txt,
                status: res.status,
            }));
        }
    }
}
exports.default = HTTPClient;
