"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const Logger_1 = require("../../../logger/Logger");
const SerializerUtil = __importStar(require("../../../utils/Serializer.util"));
const Client_util_1 = require("../../../utils/Client.util");
// https://docs.dapr.io/reference/api/pubsub_api/
class GRPCClientPubSub {
    constructor(client) {
        this.client = client;
        this.logger = new Logger_1.Logger("GRPCClient", "PubSub", client.options.logger);
    }
    async publish(pubSubName, topic, data, options = {}) {
        const msgService = new dapr_pb_1.PublishEventRequest();
        msgService.setPubsubName(pubSubName);
        msgService.setTopic(topic);
        if (data) {
            const serialized = SerializerUtil.serializeGrpc(data, options.contentType);
            msgService.setData(serialized.serializedData);
            msgService.setDataContentType(serialized.contentType);
        }
        (0, Client_util_1.addMetadataToMap)(msgService.getMetadataMap(), options.metadata);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.publishEvent(msgService, (err, _res) => {
                if (err) {
                    this.logger.error(`publish failed: ${err}`);
                    return reject({ error: err });
                }
                return resolve({});
            });
        });
    }
    async publishBulk(pubSubName, topic, messages, metadata) {
        const bulkPublishRequest = new dapr_pb_1.BulkPublishRequest();
        bulkPublishRequest.setPubsubName(pubSubName);
        bulkPublishRequest.setTopic(topic);
        const entries = (0, Client_util_1.getBulkPublishEntries)(messages);
        const serializedEntries = entries.map((entry) => {
            const serialized = SerializerUtil.serializeGrpc(entry.event);
            const bulkPublishEntry = new dapr_pb_1.BulkPublishRequestEntry();
            bulkPublishEntry.setEvent(serialized.serializedData);
            bulkPublishEntry.setContentType(serialized.contentType);
            bulkPublishEntry.setEntryId(entry.entryID);
            return bulkPublishEntry;
        });
        bulkPublishRequest.setEntriesList(serializedEntries);
        (0, Client_util_1.addMetadataToMap)(bulkPublishRequest.getMetadataMap(), metadata);
        const client = await this.client.getClient();
        return new Promise((resolve, _reject) => {
            client.bulkPublishEventAlpha1(bulkPublishRequest, (err, res) => {
                if (err) {
                    return resolve((0, Client_util_1.getBulkPublishResponse)({ entries: entries, error: err }));
                }
                const failedEntries = res.getFailedentriesList();
                if (failedEntries.length > 0) {
                    return resolve((0, Client_util_1.getBulkPublishResponse)({
                        entries: entries,
                        response: {
                            failedEntries: failedEntries.map((entry) => ({
                                entryID: entry.getEntryId(),
                                error: entry.getError(),
                            })),
                        },
                    }));
                }
                return resolve({ failedMessages: [] });
            });
        });
    }
}
exports.default = GRPCClientPubSub;
