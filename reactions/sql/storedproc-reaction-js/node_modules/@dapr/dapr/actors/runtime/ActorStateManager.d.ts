import AbstractActor from "./AbstractActor";
import StateMetadata from "./StateMetadata";
export default class ActorStateManager<T> {
    actor: AbstractActor;
    defaultStateChangeTracker: Map<string, StateMetadata<T>>;
    constructor(actor: AbstractActor);
    getContextualStateTracker(): Map<string, StateMetadata<T>>;
    addState(stateName: string, value: T): Promise<void>;
    tryAddState(stateName: string, value: T): Promise<boolean>;
    getState(stateName: string): Promise<T | null>;
    tryGetState(stateName: string): Promise<[boolean, T | null]>;
    setState(stateName: string, value: T): Promise<void>;
    removeState(stateName: string): Promise<void>;
    tryRemoveState(stateName: string): Promise<boolean>;
    containsState(stateName: string): Promise<boolean>;
    getOrAddState(stateName: string, value: T): Promise<T | null>;
    isStateMarkedForRemove(stateName: string): Promise<boolean>;
    addOrUpdateState(stateName: string, value: T, updateValueFactory: (a: string, b: T) => T): Promise<T>;
    getStateNames(): Promise<string[]>;
    clearCache(): Promise<void>;
    saveState(): Promise<void>;
}
