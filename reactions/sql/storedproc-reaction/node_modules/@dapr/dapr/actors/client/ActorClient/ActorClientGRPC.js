"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
// https://docs.dapr.io/reference/api/actors_api/
class ActorClientGRPC {
    constructor(client) {
        this.client = client;
    }
    async invoke(actorType, actorId, methodName, body) {
        const msgService = new dapr_pb_1.InvokeActorRequest();
        msgService.setActorId(actorId.getId());
        msgService.setActorType(actorType);
        msgService.setMethod(methodName);
        if (body) {
            // @todo: if body is any, do we have to figure out how to serialize in JS? (e.g. if object -> JSON.stringify?)
            msgService.setData(body);
        }
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.invokeActor(msgService, (err, res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/secrets_api/#response-body
                const resData = Buffer.from(res.getData()).toString();
                try {
                    return resolve(JSON.parse(resData));
                }
                catch (e) {
                    return resolve(resData);
                }
            });
        });
    }
    async stateTransaction(actorType, actorId, operations) {
        const transactionItems = [];
        for (const o of operations) {
            const transactionItem = new dapr_pb_1.TransactionalActorStateOperation();
            transactionItem.setKey(o.request.key);
            transactionItem.setOperationtype(o.operation);
            const msgSerialized = new any_pb_1.Any();
            msgSerialized.setValue(Buffer.from(`${o.request.value}`, "utf-8"));
            transactionItem.setValue(msgSerialized);
            transactionItems.push(transactionItem);
        }
        const msgService = new dapr_pb_1.ExecuteActorStateTransactionRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setOperationsList(transactionItems);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.executeActorStateTransaction(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/state_api/#request-body-1
                return resolve();
            });
        });
    }
    async stateGet(actorType, actorId, key) {
        const msgService = new dapr_pb_1.GetActorStateRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setKey(key);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.getActorState(msgService, (err, res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-2
                const resData = Buffer.from(res.getData()).toString();
                try {
                    const json = JSON.parse(resData);
                    return resolve(json);
                }
                catch (e) {
                    return resolve(resData);
                }
            });
        });
    }
    async registerActorReminder(actorType, actorId, name, reminder) {
        const msgService = new dapr_pb_1.RegisterActorReminderRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setName(name);
        if (reminder.data) {
            msgService.setData(Buffer.from(reminder?.data.toString(), "utf-8"));
        }
        if (reminder.period) {
            msgService.setPeriod(reminder.period.toString());
        }
        if (reminder.dueTime) {
            msgService.setDueTime(reminder.dueTime.toString());
        }
        if (reminder.ttl) {
            msgService.setTtl(reminder.ttl.toString());
        }
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.registerActorReminder(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-3
                return resolve();
            });
        });
    }
    async unregisterActorReminder(actorType, actorId, name) {
        const msgService = new dapr_pb_1.UnregisterActorReminderRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setName(name);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.unregisterActorReminder(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#delete-actor-reminder
                return resolve();
            });
        });
    }
    async registerActorTimer(actorType, actorId, name, timer) {
        const msgService = new dapr_pb_1.RegisterActorTimerRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setName(name);
        if (timer.callback) {
            msgService.setCallback(timer.callback);
        }
        if (timer.data) {
            msgService.setData(Buffer.from(timer.data, "utf-8"));
        }
        if (timer.period) {
            msgService.setPeriod(timer.period.toString());
        }
        if (timer.dueTime) {
            msgService.setDueTime(timer.dueTime.toString());
        }
        if (timer.ttl) {
            msgService.setTtl(timer.ttl.toString());
        }
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.registerActorTimer(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-3
                return resolve();
            });
        });
    }
    async unregisterActorTimer(actorType, actorId, name) {
        const msgService = new dapr_pb_1.UnregisterActorTimerRequest();
        msgService.setActorType(actorType);
        msgService.setActorId(actorId.getId());
        msgService.setName(name);
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.unregisterActorTimer(msgService, (err, _res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#delete-actor-timer
                return resolve();
            });
        });
    }
    // @todo: cannot find this one
    // async deactivate(actorType: string, actorId: string): Promise<ResActorDeactivateDto> {
    //     const msgService = new UnregisterActorTimerRequest();
    //     msgService.setActorType(actorType);
    //     msgService.setActorId(actorId);
    //     msgService.setName(name);
    //     return new Promise(async (resolve, reject) => {
    //         const client = await GRPCClientSingleton.getClient();
    //         client.unregisterActorTimer(msgService, (err, res) => {
    //             if (err) {
    //                 return reject(err);
    //             }
    //             // https://docs.dapr.io/reference/api/actors_api/#delete-actor-timer
    //             return resolve();
    //         });
    //     });
    // }
    async getActors() {
        const client = await this.client.getClient();
        return new Promise((resolve, reject) => {
            client.getMetadata(new dapr_pb_1.GetMetadataRequest(), (err, res) => {
                if (err) {
                    return reject(err);
                }
                // https://docs.dapr.io/reference/api/actors_api/#http-response-codes-2
                return resolve(res.getActiveActorsCountList());
            });
        });
    }
}
exports.default = ActorClientGRPC;
