import GRPCClient from "../../../implementation/Client/GRPCClient/GRPCClient";
import { OperationType } from "../../../types/Operation.type";
import { ActorReminderType } from "../../../types/ActorReminder.type";
import { ActorTimerType } from "../../../types/ActorTimer.type";
import IClientActor from "../../../interfaces/Client/IClientActor";
import { KeyValueType } from "../../../types/KeyValue.type";
import ActorId from "../../ActorId";
export default class ActorClientGRPC implements IClientActor {
    client: GRPCClient;
    constructor(client: GRPCClient);
    invoke(actorType: string, actorId: ActorId, methodName: string, body?: any): Promise<object>;
    stateTransaction(actorType: string, actorId: ActorId, operations: OperationType[]): Promise<void>;
    stateGet(actorType: string, actorId: ActorId, key: string): Promise<KeyValueType | string>;
    registerActorReminder(actorType: string, actorId: ActorId, name: string, reminder: ActorReminderType): Promise<void>;
    unregisterActorReminder(actorType: string, actorId: ActorId, name: string): Promise<void>;
    registerActorTimer(actorType: string, actorId: ActorId, name: string, timer: ActorTimerType): Promise<void>;
    unregisterActorTimer(actorType: string, actorId: ActorId, name: string): Promise<void>;
    getActors(): Promise<object>;
}
