/// <reference types="node" />
import DaprClient from "../../implementation/Client/DaprClient";
import Class from "../../types/Class";
import ActorId from "../ActorId";
import AbstractActor from "./AbstractActor";
import BufferSerializer from "./BufferSerializer";
export default class ActorManager<T extends AbstractActor> {
    readonly actorCls: Class<T>;
    readonly daprClient: DaprClient;
    readonly serializer: BufferSerializer;
    actors: Map<string, T>;
    constructor(actorCls: Class<T>, daprClient: DaprClient);
    createActor(actorId: ActorId): Promise<T>;
    activateActor(actorId: ActorId): Promise<void>;
    deactivateActor(actorId: ActorId): Promise<void>;
    getActiveActor(actorId: ActorId): Promise<T>;
    /**
     * Execute the given method with requestBody on the given Actor
     *
     * @param actorId
     * @param actorMethodName
     * @param requestBody
     * @param actorMethodContext
     * @returns
     */
    invoke(actorId: ActorId, actorMethodName: string, requestBody?: Buffer): Promise<any>;
    fireReminder(actorId: ActorId, reminderName: string, requestBody?: Buffer): Promise<void>;
    fireTimer(actorId: ActorId, timerName: string, requestBody?: Buffer): Promise<void>;
    callActorMethod(actorId: ActorId, actorMethodName: string, args: any): Promise<Buffer>;
}
