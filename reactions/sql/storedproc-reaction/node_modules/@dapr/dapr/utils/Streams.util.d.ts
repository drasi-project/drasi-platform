/// <reference types="node" />
/// <reference types="node" />
import { Duplex } from "node:stream";
import { ClientDuplexStream } from "@grpc/grpc-js";
import { StreamPayload } from "../proto/dapr/proto/common/v1/common_pb";
interface messageWithPayload {
    getPayload(): StreamPayload | undefined;
    setPayload(value?: StreamPayload): unknown;
}
/**
 * DaprChunkedStream is a Readable stream that processes data sent from Dapr over a gRPC stream, chunked.
 */
export declare class DaprChunkedStream<T extends messageWithPayload, U extends messageWithPayload> extends Duplex {
    private grpcStream;
    private reqFactory;
    private setReqOptionsFn;
    private writeSeq;
    private readSeq;
    constructor(grpcStream: ClientDuplexStream<T, U>, reqFactory: {
        new (): T;
    }, setReqOptionsFn: (req: T) => void);
    _read(): void;
    _write(chunk: Buffer | string, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;
    _final(callback: (error?: Error | null | undefined) => void): void;
    private readGrpcStream;
    private closeWithError;
}
export {};
