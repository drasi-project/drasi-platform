"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const GRPCServerImpl_1 = __importDefault(require("./GRPCServerImpl"));
const appcallback_grpc_pb_1 = require("../../../proto/dapr/proto/runtime/v1/appcallback_grpc_pb");
const Logger_1 = require("../../../logger/Logger");
class GRPCServer {
    constructor(client, options) {
        this.isInitialized = false;
        this.serverHost = "";
        this.serverPort = "";
        this.serverOptions = options;
        this.client = client;
        this.logger = new Logger_1.Logger("GRPCServer", "GRPCServer", client.options.logger);
        // Create Server
        const grpcChannelOptions = this.generateChannelOptions();
        this.server = new grpc.Server(grpcChannelOptions);
        this.serverCredentials = grpc.ServerCredentials.createInsecure();
        this.serverImpl = new GRPCServerImpl_1.default(this.server, client.options.logger);
        // Add our implementation
        this.logger.info("Adding Service Implementation - AppCallbackService");
        // @ts-ignore
        this.server.addService(appcallback_grpc_pb_1.AppCallbackService, this.serverImpl);
        // Add our implementation
        this.logger.info("Adding Service Implementation - AppCallbackAlphaService");
        // @ts-ignore
        this.server.addService(appcallback_grpc_pb_1.AppCallbackAlphaService, this.serverImpl);
    }
    // See: https://cs.github.com/nestjs/nest/blob/f4e9ac6208f3e7ee7ad44c3de713c9086f657977/packages/microservices/external/grpc-options.interface.ts
    generateChannelOptions() {
        const options = {};
        // See: GRPC_ARG_MAX_SEND_MESSAGE_LENGTH, it is in bytes
        // https://grpc.github.io/grpc/core/group__grpc__arg__keys.html#ga813f94f9ac3174571dd712c96cdbbdc1
        // Default is 4Mb
        options["grpc.max_receive_message_length"] = (this.serverOptions.maxBodySizeMb ?? 4) * 1024 * 1024;
        // There was an issue that there was no default set in grpc-node, so we set it here
        // https://github.com/grpc/grpc-node/issues/1158#issuecomment-1137023216
        options["grpc-node.max_session_memory"] = Number.MAX_SAFE_INTEGER;
        return options;
    }
    getServerAddress() {
        if (!this.isInitialized) {
            throw new Error(JSON.stringify({
                error: "GRPC_SERVER_NOT_INITIALIZED",
                error_message: "The gRPC server was not initialized, did you call `await GRPCServerSingleton.initialize()`?",
            }));
        }
        return `${this.serverHost}:${this.serverPort}`;
    }
    getServer() {
        if (!this.isInitialized) {
            throw new Error(JSON.stringify({
                error: "GRPC_SERVER_NOT_INITIALIZED",
                error_message: "The gRPC server was not initialized, did you call `await GRPCServerSingleton.initialize()`?",
            }));
        }
        return this.server;
    }
    // We allow this, since this will register the routes and handlers!
    getServerImpl() {
        return this.serverImpl;
    }
    async start(host, port) {
        this.serverHost = host;
        this.serverPort = port;
        await this.initializeBind();
        this.server.start();
        // We are initialized
        this.isInitialized = true;
    }
    async stop() {
        return new Promise((resolve, reject) => {
            this.server.tryShutdown((err) => {
                if (err) {
                    return reject(err);
                }
                this.isInitialized = false;
                return resolve();
            });
        });
    }
    async initializeBind() {
        this.logger.info(`Starting to listen on ${this.serverHost}:${this.serverPort}`);
        return new Promise((resolve, reject) => {
            this.server.bindAsync(`${this.serverHost}:${this.serverPort}`, this.serverCredentials, (err, _port) => {
                if (err) {
                    return reject(err);
                }
                this.logger.info(`Listening on ${this.serverHost}:${this.serverPort}`);
                return resolve();
            });
        });
    }
}
exports.default = GRPCServer;
