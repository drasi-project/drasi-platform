"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
// https://docs.dapr.io/reference/api/pubsub_api/
class HTTPServerPubSub {
    constructor(server) {
        this.server = server;
        this.logger = new Logger_1.Logger("HTTPServer", "PubSub", server.client.options.logger);
    }
    async subscribe(pubsubName, topic, cb, route = "", metadata) {
        this.server.getServerImpl().registerPubsubSubscription(pubsubName, topic, { route, metadata });
        // Add the callback to the event handlers manually
        // @todo: we will deprecate this way of working? and require subscribeToRoute?
        this.subscribeToRoute(pubsubName, topic, route, cb);
    }
    async subscribeWithOptions(pubsubName, topic, options = {}) {
        this.server.getServerImpl().registerPubsubSubscription(pubsubName, topic, options);
        if (options.callback) {
            this.subscribeToRoute(pubsubName, topic, options?.route, options.callback);
        }
    }
    subscribeToRoute(pubsubName, topic, route, cb) {
        if (!route || typeof route === "string") {
            this.subscribeToRouteStringType(pubsubName, topic, route, cb);
        }
        else {
            this.subscribeToRouteDaprPubSubRouteType(pubsubName, topic, route, cb);
        }
    }
    subscribeToRouteDaprPubSubRouteType(pubsubName, topic, route, cb) {
        // Register the default
        if (route.default) {
            this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, route.default, cb);
        }
        // Register the rules
        if (route.rules) {
            for (const rule of route.rules) {
                this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, rule.path, cb);
            }
        }
    }
    subscribeToRouteStringType(pubsubName, topic, route, cb) {
        this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, route, cb);
    }
    async subscribeBulk(pubsubName, topic, cb, bulkSubscribeOptions) {
        const bulkSubscribe = {
            enabled: true,
        };
        const { route, metadata, maxMessagesCount, maxAwaitDurationMs } = bulkSubscribeOptions || {};
        if (maxMessagesCount != undefined) {
            bulkSubscribe.maxMessagesCount = maxMessagesCount;
        }
        if (maxAwaitDurationMs != undefined) {
            bulkSubscribe.maxAwaitDurationMs = maxAwaitDurationMs;
        }
        this.server
            .getServerImpl()
            .registerPubsubSubscription(pubsubName, topic, { route, metadata, bulkSubscribe: bulkSubscribe });
        // Add the callback to the event handlers manually
        // @todo: we will deprecate this way of working? and require subscribeToRoute?
        this.subscribeToRoute(pubsubName, topic, route, cb);
    }
    getSubscriptions() {
        return this.server.getServerImpl().getSubscriptions();
    }
}
exports.default = HTTPServerPubSub;
