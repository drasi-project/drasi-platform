/// <reference types="node" />
import * as http from "http";
import express from "express";
import HTTPServerImpl from "./HTTPServerImpl";
import IServer from "../../../interfaces/Server/IServer";
import { DaprClient } from "../../..";
import { createHttpTerminator } from "http-terminator";
import { DaprServerOptions } from "../../../types/DaprServerOptions";
export type IServerImplType = HTTPServerImpl;
export type IServerType = express.Express;
export default class HTTPServer implements IServer {
    server: IServerType;
    serverInstance: undefined | http.Server;
    serverTerminator: undefined | ReturnType<typeof createHttpTerminator>;
    serverHost: string;
    serverPort: string;
    serverAddress: string;
    serverOptions: DaprServerOptions;
    serverImpl: IServerImplType;
    isInitialized: boolean;
    client: DaprClient;
    private readonly logger;
    constructor(client: DaprClient, options: DaprServerOptions);
    getServerAddress(): string;
    getServer(): IServerType;
    getServerPort(): string;
    getServerHost(): string;
    getServerImpl(): IServerImplType;
    start(host: string, port: string): Promise<void>;
    stop(): Promise<void>;
}
