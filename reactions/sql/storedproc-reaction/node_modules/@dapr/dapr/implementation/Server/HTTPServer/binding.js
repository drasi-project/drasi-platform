"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpStatusCode_enum_1 = __importDefault(require("../../../enum/HttpStatusCode.enum"));
const Logger_1 = require("../../../logger/Logger");
class HTTPServerBinding {
    constructor(server) {
        this.server = server;
        this.logger = new Logger_1.Logger("HTTPServer", "Binding", server.client.options.logger);
    }
    // Receive an input from an external system
    async receive(bindingName, cb) {
        const server = await this.server.getServer();
        server.options(`/${bindingName}`, async (_req, res) => {
            return res.end();
        });
        server.post(`/${bindingName}`, async (req, res) => {
            req.setTimeout(60 * 1000); // amount of seconds to wait for the request CB to finalize
            try {
                await cb(req?.body);
                // we send the processing status after we are done processing
                // note: if the callback takes longer than the expected wait time in the queue, it might be that this never gets called
                // @todo: can we do this cleaner without sending the response directly?
                res.statusCode = HttpStatusCode_enum_1.default.OK;
                return res.end();
            }
            catch (e) {
                res.statusCode = HttpStatusCode_enum_1.default.INTERNAL_SERVER_ERROR;
                this.logger.error(`receive failed: ${e}`);
                return res.end(JSON.stringify({
                    error: "COULD_NOT_PROCESS_CALLBACK",
                    error_msg: `Something happened while processing the input binding callback`,
                }));
            }
        });
    }
}
exports.default = HTTPServerBinding;
