import GRPCServer from "./GRPCServer";
import { TypeDaprPubSubCallback } from "../../../types/DaprPubSubCallback.type";
import IServerPubSub from "../../../interfaces/Server/IServerPubSub";
import { PubSubSubscriptionOptionsType } from "../../../types/pubsub/PubSubSubscriptionOptions.type";
import { DaprPubSubRouteType } from "../../../types/pubsub/DaprPubSubRouteType.type";
import { PubSubSubscriptionsType } from "../../../types/pubsub/PubSubSubscriptions.type";
import { KeyValueType } from "../../../types/KeyValue.type";
import { BulkSubscribeOptions } from "../../../types/pubsub/BulkSubscribeOptions.type";
export default class DaprPubSub implements IServerPubSub {
    server: GRPCServer;
    private readonly logger;
    constructor(server: GRPCServer);
    subscribe(pubsubName: string, topic: string, cb: TypeDaprPubSubCallback, route?: string | DaprPubSubRouteType, metadata?: KeyValueType): Promise<void>;
    subscribeWithOptions(pubsubName: string, topic: string, options?: PubSubSubscriptionOptionsType): Promise<void>;
    subscribeToRoute(pubsubName: string, topic: string, route: string | DaprPubSubRouteType | undefined, cb: TypeDaprPubSubCallback): void;
    subscribeToRouteDaprPubSubRouteType(pubsubName: string, topic: string, route: DaprPubSubRouteType, cb: TypeDaprPubSubCallback): void;
    subscribeToRouteStringType(pubsubName: string, topic: string, route: string | undefined, cb: TypeDaprPubSubCallback): void;
    subscribeBulk(pubsubName: string, topic: string, cb: TypeDaprPubSubCallback, bulkSubscribeOptions: BulkSubscribeOptions): Promise<void>;
    getSubscriptions(): PubSubSubscriptionsType;
}
