import GRPCClient from "./GRPCClient";
import { StateOptions } from "../../../proto/dapr/proto/common/v1/common_pb";
import { KeyValuePairType } from "../../../types/KeyValuePair.type";
import { OperationType } from "../../../types/Operation.type";
import { IRequestMetadata } from "../../../types/RequestMetadata.type";
import IClientState from "../../../interfaces/Client/IClientState";
import { KeyValueType } from "../../../types/KeyValue.type";
import { StateQueryType } from "../../../types/state/StateQuery.type";
import { StateQueryResponseType } from "../../../types/state/StateQueryResponse.type";
import { StateGetBulkOptions } from "../../../types/state/StateGetBulkOptions.type";
import { StateSaveResponseType } from "../../../types/state/StateSaveResponseType";
import { StateSaveOptions } from "../../../types/state/StateSaveOptions.type";
import { StateDeleteOptions } from "../../../types/state/StateDeleteOptions.type";
import { StateGetOptions } from "../../../types/state/StateGetOptions.type";
import { IStateOptions } from "../../../types/state/StateOptions.type";
export default class GRPCClientState implements IClientState {
    client: GRPCClient;
    constructor(client: GRPCClient);
    save(storeName: string, stateObjects: KeyValuePairType[], options?: StateSaveOptions): Promise<StateSaveResponseType>;
    get(storeName: string, key: string, options?: Partial<StateGetOptions>): Promise<KeyValueType | string>;
    getBulk(storeName: string, keys: string[], options?: StateGetBulkOptions): Promise<KeyValueType[]>;
    delete(storeName: string, key: string, options?: StateDeleteOptions): Promise<StateSaveResponseType>;
    transaction(storeName: string, operations?: OperationType[], metadata?: IRequestMetadata | null): Promise<void>;
    query(storeName: string, query: StateQueryType): Promise<StateQueryResponseType>;
    _configureStateOptions(opt?: Partial<IStateOptions>): StateOptions | undefined;
}
