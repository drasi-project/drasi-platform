"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const dapr_grpc_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_grpc_pb");
const Settings_util_1 = require("../../../utils/Settings.util");
const Logger_1 = require("../../../logger/Logger");
const sidecar_1 = __importDefault(require("./sidecar"));
const DaprClient_1 = __importDefault(require("../DaprClient"));
const version_1 = require("../../../version");
const CommunicationProtocol_enum_1 = __importDefault(require("../../../enum/CommunicationProtocol.enum"));
const GrpcEndpoint_1 = require("../../../network/GrpcEndpoint");
class GRPCClient {
    constructor(options) {
        this.daprEndpoint = this.generateEndpoint(options);
        this.options = {
            daprHost: this.daprEndpoint.hostname,
            daprPort: this.daprEndpoint.port,
            communicationProtocol: CommunicationProtocol_enum_1.default.GRPC,
            isKeepAlive: options?.isKeepAlive,
            logger: options?.logger,
            actor: options?.actor,
            daprApiToken: options?.daprApiToken,
            maxBodySizeMb: options?.maxBodySizeMb,
        };
        this.clientCredentials = this.generateCredentials();
        this.grpcClientOptions = this.generateChannelOptions();
        this.logger = new Logger_1.Logger("GRPCClient", "GRPCClient", options.logger);
        this.isInitialized = false;
        this.logger.info(`Opening connection to ${this.options.daprHost}:${this.options.daprPort}`);
        this.client = new dapr_grpc_pb_1.DaprClient(this.daprEndpoint.endpoint, this.getClientCredentials(), this.getGrpcClientOptions());
    }
    async getClient(requiresInitialization = true) {
        // Ensure the sidecar has been started
        if (!this.isInitialized && requiresInitialization) {
            await this.start();
        }
        return this.client;
    }
    getClientCredentials() {
        return this.clientCredentials;
    }
    getGrpcClientOptions() {
        return this.grpcClientOptions;
    }
    generateEndpoint(options) {
        const host = options?.daprHost ?? Settings_util_1.Settings.getDefaultHost();
        const port = options?.daprPort ?? Settings_util_1.Settings.getDefaultGrpcPort();
        let uri = `${host}:${port}`;
        if (!(options?.daprHost || options?.daprPort)) {
            // If neither host nor port are specified, check the endpoint environment variable.
            const endpoint = Settings_util_1.Settings.getDefaultGrpcEndpoint();
            if (endpoint != "") {
                uri = endpoint;
            }
        }
        return new GrpcEndpoint_1.GrpcEndpoint(uri);
    }
    generateCredentials() {
        if (this.daprEndpoint?.tls) {
            return grpc.ChannelCredentials.createSsl();
        }
        return grpc.ChannelCredentials.createInsecure();
    }
    generateChannelOptions() {
        // const options: Record<string, string | number> = {};
        let options = {};
        // See: GRPC_ARG_MAX_SEND_MESSAGE_LENGTH, it is in bytes
        // https://grpc.github.io/grpc/core/group__grpc__arg__keys.html#ga813f94f9ac3174571dd712c96cdbbdc1
        // Default is 4Mb
        options["grpc.max_send_message_length"] = (this.options.maxBodySizeMb ?? 4) * 1024 * 1024;
        // There was an issue that there was no default set in grpc-node, so we set it here
        // https://github.com/grpc/grpc-node/issues/1158#issuecomment-1137023216
        options["grpc-node.max_session_memory"] = Number.MAX_SAFE_INTEGER;
        // Add user agent
        options["grpc.primary_user_agent"] = "dapr-sdk-js/v" + version_1.SDK_VERSION;
        // Add interceptors if we have an API token
        if (this.options.daprApiToken !== "") {
            options = {
                interceptors: [this.generateInterceptors()],
                ...options,
            };
        }
        return options;
    }
    generateInterceptors() {
        return (options, nextCall) => {
            return new grpc.InterceptingCall(nextCall(options), {
                start: (metadata, listener, next) => {
                    if (metadata.get("dapr-api-token").length == 0) {
                        metadata.add("dapr-api-token", this.options.daprApiToken);
                    }
                    next(metadata, listener);
                },
            });
        };
    }
    setIsInitialized(isInitialized) {
        this.isInitialized = isInitialized;
    }
    getIsInitialized() {
        return this.isInitialized;
    }
    async stop() {
        this.client.close();
    }
    async _startWaitForClientReady() {
        const deadline = Date.now() + Settings_util_1.Settings.getDaprSidecarStartupTimeoutMs();
        return new Promise((resolve, reject) => {
            this.client.waitForReady(deadline, (err) => {
                if (err) {
                    this.logger.error(`Error waiting for client to be ready: ${err}`);
                    return reject();
                }
                return resolve();
            });
        });
    }
    async _startAwaitSidecarStarted() {
        await DaprClient_1.default.awaitSidecarStarted(async () => await sidecar_1.default.isStarted(this), this.logger);
    }
    /**
     * Ensure the client is started, this takes care of:
     * 1. Making sure the sidecar is started
     * 2. Making sure the connection is established (e.g. in gRPC)
     * 3. Making sure the client is ready to be used
     */
    async start() {
        await this._startAwaitSidecarStarted();
        await this._startWaitForClientReady();
        this.isInitialized = true;
    }
}
exports.default = GRPCClient;
