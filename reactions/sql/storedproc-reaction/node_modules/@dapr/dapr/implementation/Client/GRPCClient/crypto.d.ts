/// <reference types="node" />
/// <reference types="node" />
import { Duplex } from "node:stream";
import GRPCClient from "./GRPCClient";
import { type DecryptRequest, type EncryptRequest } from "../../../types/crypto/Requests";
import IClientCrypto from "../../../interfaces/Client/IClientCrypto";
export default class GRPCClientCrypto implements IClientCrypto {
    client: GRPCClient;
    constructor(client: GRPCClient);
    encrypt(opts: EncryptRequest): Promise<Duplex>;
    encrypt(inData: Buffer | ArrayBuffer | ArrayBufferView | string, opts: EncryptRequest): Promise<Buffer>;
    decrypt(opts: DecryptRequest): Promise<Duplex>;
    decrypt(inData: Buffer | ArrayBuffer | ArrayBufferView, opts: DecryptRequest): Promise<Buffer>;
    private toArrayBuffer;
    private processStream;
}
