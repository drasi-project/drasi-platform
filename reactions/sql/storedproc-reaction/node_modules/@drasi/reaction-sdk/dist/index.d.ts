import { ChangeEvent } from "./types/ChangeEvent";
import { ControlEvent } from "./types/ControlEvent";
import { ReactionOptions } from "./options";
export { ReactionOptions } from "./options";
export { getConfigValue, parseJson, parseYaml } from "./utils";
export { ChangeEvent } from "./types/ChangeEvent";
export { ControlEvent } from "./types/ControlEvent";
export { RunningSignal } from "./types/RunningSignal";
export { BootstrapStartedSignal } from "./types/BootstrapStartedSignal";
export { BootstrapCompletedSignal } from "./types/BootstrapCompletedSignal";
export { StoppedSignal } from "./types/StoppedSignal";
/**
 * The function signature that is called when a change event is received.
 *
 * @param event The change event from the query
 * @param queryConfig The configuration object for the query
 */
export type OnChangeEvent<TQueryConfig = any> = (event: ChangeEvent, queryConfig?: TQueryConfig) => Promise<void>;
/**
 * The function signature that is called when a control event is received.
 *
 * @param event The control event from the query
 * @param queryConfig The configuration object for the query
 */
export type OnControlEvent<TQueryConfig = any> = (event: ControlEvent, queryConfig?: TQueryConfig) => Promise<void>;
/**
 * A class that encapsulates all the functionality for a Drasi Reaction.
 *
 * @template TQueryConfig The type of the query configuration object. This is defined per query in the Reaction manifest.
 *
 * @example
 * ```typescript
 * let myReaction = new DrasiReaction(async (event: ChangeEvent) => {
 *   // Handle the event that describes the changes to the query results
 * });
 * myReaction.start();
 * ```
 *
*/
export declare class DrasiReaction<TQueryConfig = any> {
    private onChangeEvent;
    private onControlEvent;
    private daprServer;
    private pubSubName;
    private configDirectory;
    private queryConfig;
    private parseQueryConfig;
    /**
     *
     * @param onChangeEvent {OnChangeEvent} The function that is called when a change event is received.
     * @param options {ReactionOptions} The options for the Reaction.
     */
    constructor(onChangeEvent: OnChangeEvent, options?: ReactionOptions<TQueryConfig>);
    /**
     * Starts the Drasi Reaction.
     */
    start(): Promise<void>;
    stop(): Promise<void>;
    onMessage(data: any): Promise<void>;
}
