"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrasiReaction = exports.parseYaml = exports.parseJson = exports.getConfigValue = void 0;
const dapr_1 = require("@dapr/dapr");
const fs_1 = require("fs");
var utils_1 = require("./utils");
Object.defineProperty(exports, "getConfigValue", { enumerable: true, get: function () { return utils_1.getConfigValue; } });
Object.defineProperty(exports, "parseJson", { enumerable: true, get: function () { return utils_1.parseJson; } });
Object.defineProperty(exports, "parseYaml", { enumerable: true, get: function () { return utils_1.parseYaml; } });
/**
 * A class that encapsulates all the functionality for a Drasi Reaction.
 *
 * @template TQueryConfig The type of the query configuration object. This is defined per query in the Reaction manifest.
 *
 * @example
 * ```typescript
 * let myReaction = new DrasiReaction(async (event: ChangeEvent) => {
 *   // Handle the event that describes the changes to the query results
 * });
 * myReaction.start();
 * ```
 *
*/
class DrasiReaction {
    /**
     *
     * @param onChangeEvent {OnChangeEvent} The function that is called when a change event is received.
     * @param options {ReactionOptions} The options for the Reaction.
     */
    constructor(onChangeEvent, options) {
        this.pubSubName = process.env["PubsubName"] ?? "drasi-pubsub";
        this.configDirectory = process.env["QueryConfigPath"] ?? "/etc/queries";
        this.queryConfig = new Map();
        this.onChangeEvent = onChangeEvent;
        this.onControlEvent = options?.onControlEvent;
        this.parseQueryConfig = options?.parseQueryConfig;
        this.daprServer = new dapr_1.DaprServer({
            serverPort: '80'
        });
    }
    /**
     * Starts the Drasi Reaction.
     */
    async start() {
        try {
            let queryIds = (0, fs_1.readdirSync)(this.configDirectory);
            for (let queryId of queryIds) {
                if (!queryId || queryId.startsWith('.'))
                    continue;
                console.log(`Subscribing to query ${queryId}`);
                await this.daprServer.pubsub.subscribe(this.pubSubName, `${queryId}-results`, this.onMessage.bind(this));
                if (this.parseQueryConfig) {
                    let cfgStr = (0, fs_1.readFileSync)(`${this.configDirectory}/${queryId}`, 'utf-8');
                    let cfg = this.parseQueryConfig(queryId, cfgStr);
                    this.queryConfig.set(queryId, cfg);
                }
            }
            await this.daprServer.start();
        }
        catch (err) {
            console.error(err);
            (0, fs_1.writeFileSync)("/dev/termination-log", err.message);
            process.exit(1);
        }
    }
    async stop() {
        await this.daprServer.stop();
    }
    async onMessage(data) {
        console.log(`Received ${data?.kind} sequence: ${data?.sequence} for query ${data?.queryId}`);
        let queryConfig = this.queryConfig.get(data.queryId);
        switch (data.kind) {
            case "change":
                await this.onChangeEvent(data, queryConfig);
                break;
            case "control":
                if (!this.onControlEvent) {
                    console.log("Received control event but no handler is registered");
                    return;
                }
                await this.onControlEvent(data, queryConfig);
                break;
            default:
                console.log("Unknown message kind: " + data.kind);
        }
    }
}
exports.DrasiReaction = DrasiReaction;
//# sourceMappingURL=index.js.map