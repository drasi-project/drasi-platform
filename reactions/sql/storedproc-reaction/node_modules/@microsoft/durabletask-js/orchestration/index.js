"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.newOrchestrationState = void 0;
const failure_details_1 = require("../task/failure-details");
const orchestration_status_enum_1 = require("./enum/orchestration-status.enum");
const orchestration_state_1 = require("./orchestration-state");
function newOrchestrationState(instanceId, res) {
    if (!res || !res.getExists()) {
        return;
    }
    const state = res.getOrchestrationstate();
    let failureDetails;
    const failureDetailsErrorMessage = state?.getFailuredetails()?.getErrormessage();
    const failureDetailsErrorType = state?.getFailuredetails()?.getErrortype();
    if (state && failureDetailsErrorMessage && failureDetailsErrorType) {
        failureDetails = new failure_details_1.FailureDetails(failureDetailsErrorMessage, failureDetailsErrorType, state.getFailuredetails()?.getStacktrace()?.toString());
    }
    // Convert Timestamp seconds and nanos to Date
    const tsCreated = state?.getCreatedtimestamp();
    const tsUpdated = state?.getLastupdatedtimestamp();
    let tsCreatedParsed = new Date();
    let tsUpdatedParsed = new Date();
    if (tsCreated) {
        tsCreatedParsed = new Date(tsCreated.getSeconds() * 1000 + tsCreated.getNanos() / 1000000);
    }
    if (tsUpdated) {
        tsUpdatedParsed = new Date(tsUpdated.getSeconds() * 1000 + tsUpdated.getNanos() / 1000000);
    }
    return new orchestration_state_1.OrchestrationState(instanceId, state?.getName() ?? "", (0, orchestration_status_enum_1.fromProtobuf)(state?.getOrchestrationstatus() ?? 0), new Date(tsCreatedParsed), new Date(tsUpdatedParsed), state?.getInput()?.toString(), state?.getOutput()?.toString(), state?.getCustomstatus()?.toString(), failureDetails);
}
exports.newOrchestrationState = newOrchestrationState;
