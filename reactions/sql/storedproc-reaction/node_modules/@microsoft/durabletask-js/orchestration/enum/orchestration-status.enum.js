"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrchestrationStatus = exports.toProtobuf = exports.fromProtobuf = void 0;
const pb = __importStar(require("../../proto/orchestrator_service_pb"));
function fromProtobuf(val) {
    const values = Object.values(OrchestrationStatus);
    const valIdx = values.findIndex((v) => v == val);
    // Return the entry of the OrchestrationStatus enum at index
    const entries = Object.entries(OrchestrationStatus);
    return entries[valIdx][1];
}
exports.fromProtobuf = fromProtobuf;
function toProtobuf(val) {
    const values = Object.values(pb.OrchestrationStatus);
    const valIdx = values.findIndex((v) => v == val);
    // Return the entry of the OrchestrationStatus enum at index
    const entries = Object.entries(pb.OrchestrationStatus);
    return entries[valIdx][1];
}
exports.toProtobuf = toProtobuf;
var OrchestrationStatus;
(function (OrchestrationStatus) {
    OrchestrationStatus[OrchestrationStatus["RUNNING"] = 0] = "RUNNING";
    OrchestrationStatus[OrchestrationStatus["COMPLETED"] = 1] = "COMPLETED";
    OrchestrationStatus[OrchestrationStatus["FAILED"] = 3] = "FAILED";
    OrchestrationStatus[OrchestrationStatus["TERMINATED"] = 5] = "TERMINATED";
    OrchestrationStatus[OrchestrationStatus["CONTINUED_AS_NEW"] = 2] = "CONTINUED_AS_NEW";
    OrchestrationStatus[OrchestrationStatus["PENDING"] = 6] = "PENDING";
    OrchestrationStatus[OrchestrationStatus["SUSPENDED"] = 7] = "SUSPENDED";
})(OrchestrationStatus || (exports.OrchestrationStatus = OrchestrationStatus = {}));
