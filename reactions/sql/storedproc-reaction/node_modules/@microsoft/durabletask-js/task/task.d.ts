import { TaskFailedError } from "./exception/task-failed-error";
import { CompositeTask } from "./composite-task";
/**
 * Abstract base class for asynchronous tasks in a durable orchestration.
 */
export declare class Task<T> {
    _result: T | undefined;
    _exception: TaskFailedError | undefined;
    _parent: CompositeTask<T> | undefined;
    _isComplete: boolean;
    constructor();
    /**
     * Returns true if the task has completed, false otherwise
     */
    get isComplete(): boolean;
    /**
     * Returns true if the task has failed, false otherwise
     */
    get isFailed(): boolean;
    /**
     * Get the result of the task
     */
    getResult(): T;
    /**
     * Get the exception that caused the task to fail
     */
    getException(): TaskFailedError;
}
