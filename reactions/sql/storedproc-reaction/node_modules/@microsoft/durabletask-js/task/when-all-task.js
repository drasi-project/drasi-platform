"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhenAllTask = void 0;
const composite_task_1 = require("./composite-task");
/**
 * A task that completes when all of its child tasks complete
 */
class WhenAllTask extends composite_task_1.CompositeTask {
    constructor(tasks) {
        super(tasks);
        this._completedTasks = 0;
        this._failedTasks = 0;
    }
    pendingTasks() {
        return this._tasks.length - this._completedTasks;
    }
    onChildCompleted(task) {
        if (this._isComplete) {
            throw new Error("Task is already completed");
        }
        this._completedTasks++;
        if (task.isFailed && !this._exception) {
            this._exception = task.getException();
            this._isComplete = true;
        }
        if (this._completedTasks == this._tasks.length) {
            this._result = this._tasks.map((task) => task.getResult());
            this._isComplete = true;
        }
    }
    get completedTasks() {
        return this._completedTasks;
    }
}
exports.WhenAllTask = WhenAllTask;
