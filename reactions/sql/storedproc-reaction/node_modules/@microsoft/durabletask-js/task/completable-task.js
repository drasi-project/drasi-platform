"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletableTask = void 0;
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const task_failed_error_1 = require("./exception/task-failed-error");
const task_1 = require("./task");
class CompletableTask extends task_1.Task {
    constructor() {
        super();
    }
    complete(result) {
        if (this._isComplete) {
            throw new Error("Task is already completed");
        }
        this._result = result;
        this._isComplete = true;
        if (this._parent) {
            this._parent.onChildCompleted(this);
        }
    }
    fail(message, details) {
        if (this._isComplete) {
            throw new Error("Task is already completed");
        }
        details = details ?? new pb.TaskFailureDetails();
        this._exception = new task_failed_error_1.TaskFailedError(message, details);
        this._isComplete = true;
        if (this._parent) {
            this._parent.onChildCompleted(this);
        }
    }
}
exports.CompletableTask = CompletableTask;
