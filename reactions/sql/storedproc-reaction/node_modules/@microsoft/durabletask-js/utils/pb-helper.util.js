"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrchestrationStatusStr = exports.isEmpty = exports.newCreateSubOrchestrationAction = exports.newTimestamp = exports.newScheduleTaskAction = exports.newCreateTimerAction = exports.newCompleteOrchestrationAction = exports.getStringValue = exports.newTerminatedEvent = exports.newResumeEvent = exports.newSuspendEvent = exports.newEventRaisedEvent = exports.newFailureDetails = exports.newSubOrchestrationFailedEvent = exports.newSubOrchestrationCompletedEvent = exports.newSubOrchestrationCreatedEvent = exports.newTaskFailedEvent = exports.newTaskCompletedEvent = exports.newTaskScheduledEvent = exports.newTimerFiredEvent = exports.newTimerCreatedEvent = exports.newExecutionStartedEvent = exports.newOrchestratorStartedEvent = void 0;
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const timestamp_pb_1 = require("google-protobuf/google/protobuf/timestamp_pb");
function newOrchestratorStartedEvent(timestamp) {
    const ts = new timestamp_pb_1.Timestamp();
    if (timestamp) {
        ts.fromDate(timestamp);
    }
    const orchestratorStartEvent = new pb.OrchestratorStartedEvent();
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setOrchestratorstarted(orchestratorStartEvent);
    return event;
}
exports.newOrchestratorStartedEvent = newOrchestratorStartedEvent;
function newExecutionStartedEvent(name, instanceId, encodedInput) {
    const ts = new timestamp_pb_1.Timestamp();
    const orchestrationInstance = new pb.OrchestrationInstance();
    orchestrationInstance.setInstanceid(instanceId);
    const executionStartedEvent = new pb.ExecutionStartedEvent();
    executionStartedEvent.setName(name);
    executionStartedEvent.setInput(getStringValue(encodedInput));
    executionStartedEvent.setOrchestrationinstance(orchestrationInstance);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setExecutionstarted(executionStartedEvent);
    return event;
}
exports.newExecutionStartedEvent = newExecutionStartedEvent;
function newTimerCreatedEvent(timerId, fireAt) {
    const ts = new timestamp_pb_1.Timestamp();
    ts.fromDate(fireAt);
    const timerCreatedEvent = new pb.TimerCreatedEvent();
    timerCreatedEvent.setFireat(ts);
    const event = new pb.HistoryEvent();
    event.setEventid(timerId);
    event.setTimestamp(ts);
    event.setTimercreated(timerCreatedEvent);
    return event;
}
exports.newTimerCreatedEvent = newTimerCreatedEvent;
function newTimerFiredEvent(timerId, fireAt) {
    const ts = new timestamp_pb_1.Timestamp();
    ts.fromDate(fireAt);
    const timerFiredEvent = new pb.TimerFiredEvent();
    timerFiredEvent.setTimerid(timerId);
    timerFiredEvent.setFireat(ts);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setTimerfired(timerFiredEvent);
    return event;
}
exports.newTimerFiredEvent = newTimerFiredEvent;
function newTaskScheduledEvent(eventId, name, encodedInput) {
    const ts = new timestamp_pb_1.Timestamp();
    const taskScheduledEvent = new pb.TaskScheduledEvent();
    taskScheduledEvent.setName(name);
    taskScheduledEvent.setInput(getStringValue(encodedInput));
    const event = new pb.HistoryEvent();
    event.setEventid(eventId);
    event.setTimestamp(ts);
    event.setTaskscheduled(taskScheduledEvent);
    return event;
}
exports.newTaskScheduledEvent = newTaskScheduledEvent;
function newTaskCompletedEvent(eventId, encodedOutput) {
    const ts = new timestamp_pb_1.Timestamp();
    const taskCompletedEvent = new pb.TaskCompletedEvent();
    taskCompletedEvent.setResult(getStringValue(encodedOutput));
    taskCompletedEvent.setTaskscheduledid(eventId);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setTaskcompleted(taskCompletedEvent);
    return event;
}
exports.newTaskCompletedEvent = newTaskCompletedEvent;
function newTaskFailedEvent(eventId, ex) {
    const ts = new timestamp_pb_1.Timestamp();
    const taskFailedEvent = new pb.TaskFailedEvent();
    taskFailedEvent.setFailuredetails(newFailureDetails(ex));
    taskFailedEvent.setTaskscheduledid(eventId);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setTaskfailed(taskFailedEvent);
    return event;
}
exports.newTaskFailedEvent = newTaskFailedEvent;
function newSubOrchestrationCreatedEvent(eventId, name, instanceId, encodedInput) {
    const ts = new timestamp_pb_1.Timestamp();
    const subOrchestrationInstanceCreatedEvent = new pb.SubOrchestrationInstanceCreatedEvent();
    subOrchestrationInstanceCreatedEvent.setName(name);
    subOrchestrationInstanceCreatedEvent.setInput(getStringValue(encodedInput));
    subOrchestrationInstanceCreatedEvent.setInstanceid(instanceId);
    const event = new pb.HistoryEvent();
    event.setEventid(eventId);
    event.setTimestamp(ts);
    event.setSuborchestrationinstancecreated(subOrchestrationInstanceCreatedEvent);
    return event;
}
exports.newSubOrchestrationCreatedEvent = newSubOrchestrationCreatedEvent;
function newSubOrchestrationCompletedEvent(eventId, encodedOutput) {
    const ts = new timestamp_pb_1.Timestamp();
    const subOrchestrationInstanceCompletedEvent = new pb.SubOrchestrationInstanceCompletedEvent();
    subOrchestrationInstanceCompletedEvent.setResult(getStringValue(encodedOutput));
    subOrchestrationInstanceCompletedEvent.setTaskscheduledid(eventId);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setSuborchestrationinstancecompleted(subOrchestrationInstanceCompletedEvent);
    return event;
}
exports.newSubOrchestrationCompletedEvent = newSubOrchestrationCompletedEvent;
function newSubOrchestrationFailedEvent(eventId, ex) {
    const ts = new timestamp_pb_1.Timestamp();
    const subOrchestrationInstanceFailedEvent = new pb.SubOrchestrationInstanceFailedEvent();
    subOrchestrationInstanceFailedEvent.setFailuredetails(newFailureDetails(ex));
    subOrchestrationInstanceFailedEvent.setTaskscheduledid(eventId);
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setSuborchestrationinstancefailed(subOrchestrationInstanceFailedEvent);
    return event;
}
exports.newSubOrchestrationFailedEvent = newSubOrchestrationFailedEvent;
function newFailureDetails(e) {
    const failure = new pb.TaskFailureDetails();
    failure.setErrortype(e.constructor.name);
    failure.setErrormessage(e.message);
    // Construct a google_protobuf_wrappers_pb.StringValue
    const stringValueStackTrace = new wrappers_pb_1.StringValue();
    stringValueStackTrace.setValue(e.stack.toString());
    failure.setStacktrace(stringValueStackTrace);
    return failure;
}
exports.newFailureDetails = newFailureDetails;
function newEventRaisedEvent(name, encodedInput) {
    const ts = new timestamp_pb_1.Timestamp();
    const eventRaised = new pb.EventRaisedEvent();
    eventRaised.setName(name);
    eventRaised.setInput(getStringValue(encodedInput));
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setEventraised(eventRaised);
    return event;
}
exports.newEventRaisedEvent = newEventRaisedEvent;
function newSuspendEvent() {
    const ts = new timestamp_pb_1.Timestamp();
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setExecutionsuspended(new pb.ExecutionSuspendedEvent());
    return event;
}
exports.newSuspendEvent = newSuspendEvent;
function newResumeEvent() {
    const ts = new timestamp_pb_1.Timestamp();
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setExecutionresumed(new pb.ExecutionResumedEvent());
    return event;
}
exports.newResumeEvent = newResumeEvent;
function newTerminatedEvent(encodedOutput) {
    const executionTerminatedEvent = new pb.ExecutionTerminatedEvent();
    executionTerminatedEvent.setInput(getStringValue(encodedOutput));
    const ts = new timestamp_pb_1.Timestamp();
    const event = new pb.HistoryEvent();
    event.setEventid(-1);
    event.setTimestamp(ts);
    event.setExecutionterminated(executionTerminatedEvent);
    return event;
}
exports.newTerminatedEvent = newTerminatedEvent;
function getStringValue(val) {
    if (!val) {
        return;
    }
    const stringValue = new wrappers_pb_1.StringValue();
    stringValue.setValue(val);
    return stringValue;
}
exports.getStringValue = getStringValue;
function newCompleteOrchestrationAction(id, status, result, failureDetails, carryoverEvents) {
    const completeOrchestrationAction = new pb.CompleteOrchestrationAction();
    completeOrchestrationAction.setOrchestrationstatus(status);
    completeOrchestrationAction.setResult(getStringValue(result));
    completeOrchestrationAction.setFailuredetails(failureDetails);
    completeOrchestrationAction.setCarryovereventsList(carryoverEvents || []);
    const action = new pb.OrchestratorAction();
    action.setId(id);
    action.setCompleteorchestration(completeOrchestrationAction);
    return action;
}
exports.newCompleteOrchestrationAction = newCompleteOrchestrationAction;
function newCreateTimerAction(id, fireAt) {
    const timestamp = new timestamp_pb_1.Timestamp();
    timestamp.fromDate(fireAt);
    const createTimerAction = new pb.CreateTimerAction();
    createTimerAction.setFireat(timestamp);
    const action = new pb.OrchestratorAction();
    action.setId(id);
    action.setCreatetimer(createTimerAction);
    return action;
}
exports.newCreateTimerAction = newCreateTimerAction;
function newScheduleTaskAction(id, name, encodedInput) {
    const scheduleTaskAction = new pb.ScheduleTaskAction();
    scheduleTaskAction.setName(name);
    scheduleTaskAction.setInput(getStringValue(encodedInput));
    const action = new pb.OrchestratorAction();
    action.setId(id);
    action.setScheduletask(scheduleTaskAction);
    return action;
}
exports.newScheduleTaskAction = newScheduleTaskAction;
function newTimestamp(dt) {
    const timestamp = new timestamp_pb_1.Timestamp();
    timestamp.fromDate(dt);
    return timestamp;
}
exports.newTimestamp = newTimestamp;
function newCreateSubOrchestrationAction(id, name, instanceId, encodedInput) {
    const createSubOrchestrationAction = new pb.CreateSubOrchestrationAction();
    createSubOrchestrationAction.setName(name);
    createSubOrchestrationAction.setInstanceid(instanceId || "");
    createSubOrchestrationAction.setInput(getStringValue(encodedInput));
    const action = new pb.OrchestratorAction();
    action.setId(id);
    action.setCreatesuborchestration(createSubOrchestrationAction);
    return action;
}
exports.newCreateSubOrchestrationAction = newCreateSubOrchestrationAction;
function isEmpty(v) {
    return v == null || v.getValue() === "";
}
exports.isEmpty = isEmpty;
/**
 * Get the orchstration status by the enum value of the status
 *
 * @param status
 * @returns
 */
function getOrchestrationStatusStr(status) {
    const idx = Object.values(pb.OrchestrationStatus).indexOf(status);
    const name = Object.keys(pb.OrchestrationStatus)[idx];
    if (name?.startsWith("ORCHESTRATION_STATUS_")) {
        return name.slice("ORCHESTRATION_STATUS_".length);
    }
    return "UNKNOWN";
}
exports.getOrchestrationStatusStr = getOrchestrationStatusStr;
