import { StringValue } from "google-protobuf/google/protobuf/wrappers_pb";
import * as pb from "../proto/orchestrator_service_pb";
import { Timestamp } from "google-protobuf/google/protobuf/timestamp_pb";
export declare function newOrchestratorStartedEvent(timestamp?: Date | null): pb.HistoryEvent;
export declare function newExecutionStartedEvent(name: string, instanceId: string, encodedInput?: string): pb.HistoryEvent;
export declare function newTimerCreatedEvent(timerId: number, fireAt: Date): pb.HistoryEvent;
export declare function newTimerFiredEvent(timerId: number, fireAt: Date): pb.HistoryEvent;
export declare function newTaskScheduledEvent(eventId: number, name: string, encodedInput?: string): pb.HistoryEvent;
export declare function newTaskCompletedEvent(eventId: number, encodedOutput?: string): pb.HistoryEvent;
export declare function newTaskFailedEvent(eventId: number, ex: Error): pb.HistoryEvent;
export declare function newSubOrchestrationCreatedEvent(eventId: number, name: string, instanceId: string, encodedInput?: string): pb.HistoryEvent;
export declare function newSubOrchestrationCompletedEvent(eventId: number, encodedOutput?: string): pb.HistoryEvent;
export declare function newSubOrchestrationFailedEvent(eventId: number, ex: Error): pb.HistoryEvent;
export declare function newFailureDetails(e: any): pb.TaskFailureDetails;
export declare function newEventRaisedEvent(name: string, encodedInput?: string): pb.HistoryEvent;
export declare function newSuspendEvent(): pb.HistoryEvent;
export declare function newResumeEvent(): pb.HistoryEvent;
export declare function newTerminatedEvent(encodedOutput?: string): pb.HistoryEvent;
export declare function getStringValue(val?: string): StringValue | undefined;
export declare function newCompleteOrchestrationAction(id: number, status: pb.OrchestrationStatus, result?: string, failureDetails?: pb.TaskFailureDetails, carryoverEvents?: pb.HistoryEvent[] | null): pb.OrchestratorAction;
export declare function newCreateTimerAction(id: number, fireAt: Date): pb.OrchestratorAction;
export declare function newScheduleTaskAction(id: number, name: string, encodedInput?: string): pb.OrchestratorAction;
export declare function newTimestamp(dt: Date): Timestamp;
export declare function newCreateSubOrchestrationAction(id: number, name: string, instanceId?: string | null, encodedInput?: string): pb.OrchestratorAction;
export declare function isEmpty(v?: StringValue | null): boolean;
/**
 * Get the orchstration status by the enum value of the status
 *
 * @param status
 * @returns
 */
export declare function getOrchestrationStatusStr(status: number): string;
