// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do one of these:
//
//    using Drasi.Reactions.Debug.Servers.Models.Unpacked;
//
//    var changeNotification = ChangeNotification.FromJson(jsonString);
//    var changePayload = ChangePayload.FromJson(jsonString);
//    var changeSource = ChangeSource.FromJson(jsonString);
//    var controlPayload = ControlPayload.FromJson(jsonString);
//    var controlSignalNotification = ControlSignalNotification.FromJson(jsonString);
//    var notification = Notification.FromJson(jsonString);
//    var op = Op.FromJson(jsonString);
//    var reloadHeader = ReloadHeader.FromJson(jsonString);
//    var reloadItem = ReloadItem.FromJson(jsonString);
//    var versions = Versions.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace Drasi.Reactions.Debug.Servers.Models.Unpacked
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class ChangeNotification
    {
        [JsonPropertyName("op")]
        public ChangeNotificationOp Op { get; set; }

        [JsonPropertyName("payload")]
        public PayloadClass Payload { get; set; }

        /// <summary>
        /// The sequence number of the source change
        /// </summary>
        [JsonPropertyName("seq")]
        public long Seq { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Dictionary<string, object> Metadata { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class PayloadClass
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("after")]
        public Dictionary<string, object> After { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("before")]
        public Dictionary<string, object> Before { get; set; }

        [JsonPropertyName("source")]
        public SourceClass Source { get; set; }
    }

    public partial class SourceClass
    {
        /// <summary>
        /// The ID of the query that the change originated from
        /// </summary>
        [JsonPropertyName("queryId")]
        public string QueryId { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class ChangePayload
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("after")]
        public Dictionary<string, object> After { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("before")]
        public Dictionary<string, object> Before { get; set; }

        [JsonPropertyName("source")]
        public SourceClass Source { get; set; }
    }

    public partial class ChangeSource
    {
        /// <summary>
        /// The ID of the query that the change originated from
        /// </summary>
        [JsonPropertyName("queryId")]
        public string QueryId { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class ControlPayload
    {
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        [JsonPropertyName("source")]
        public SourceClass Source { get; set; }
    }

    public partial class ControlSignalNotification
    {
        [JsonPropertyName("op")]
        public ControlSignalNotificationOp Op { get; set; }

        [JsonPropertyName("payload")]
        public ControlSignalNotificationPayload Payload { get; set; }

        /// <summary>
        /// The sequence number of the control signal
        /// </summary>
        [JsonPropertyName("seq")]
        public long Seq { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Dictionary<string, object> Metadata { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class ControlSignalNotificationPayload
    {
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        [JsonPropertyName("source")]
        public SourceClass Source { get; set; }
    }

    public partial class Notification
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Dictionary<string, object> Metadata { get; set; }

        [JsonPropertyName("op")]
        public OpEnum Op { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class ReloadHeader
    {
        [JsonPropertyName("op")]
        public ReloadHeaderOp Op { get; set; }

        /// <summary>
        /// The sequence number of last known source change
        /// </summary>
        [JsonPropertyName("seq")]
        public long Seq { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Dictionary<string, object> Metadata { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public partial class ReloadItem
    {
        [JsonPropertyName("op")]
        public ReloadItemOp Op { get; set; }

        [JsonPropertyName("payload")]
        public PayloadClass Payload { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Dictionary<string, object> Metadata { get; set; }

        [JsonPropertyName("ts_ms")]
        public long TsMs { get; set; }
    }

    public enum ChangeNotificationOp { D, I, U };

    public enum ControlSignalNotificationOp { X };

    public enum OpEnum { D, H, I, R, U, X };

    public enum ReloadHeaderOp { H };

    public enum ReloadItemOp { R };

    public enum VersionsEnum { V1 };

    public partial class ChangeNotification
    {
        public static ChangeNotification FromJson(string json) => JsonSerializer.Deserialize<ChangeNotification>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ChangePayload
    {
        public static ChangePayload FromJson(string json) => JsonSerializer.Deserialize<ChangePayload>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ChangeSource
    {
        public static ChangeSource FromJson(string json) => JsonSerializer.Deserialize<ChangeSource>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ControlPayload
    {
        public static ControlPayload FromJson(string json) => JsonSerializer.Deserialize<ControlPayload>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ControlSignalNotification
    {
        public static ControlSignalNotification FromJson(string json) => JsonSerializer.Deserialize<ControlSignalNotification>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class Notification
    {
        public static Notification FromJson(string json) => JsonSerializer.Deserialize<Notification>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public class Op
    {
        public static OpEnum FromJson(string json) => JsonSerializer.Deserialize<OpEnum>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ReloadHeader
    {
        public static ReloadHeader FromJson(string json) => JsonSerializer.Deserialize<ReloadHeader>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public partial class ReloadItem
    {
        public static ReloadItem FromJson(string json) => JsonSerializer.Deserialize<ReloadItem>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public class Versions
    {
        public static VersionsEnum FromJson(string json) => JsonSerializer.Deserialize<VersionsEnum>(json, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ChangeNotification self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ChangePayload self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ChangeSource self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ControlPayload self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ControlSignalNotification self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this Notification self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this OpEnum self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ReloadHeader self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this ReloadItem self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
        public static string ToJson(this VersionsEnum self) => JsonSerializer.Serialize(self, Drasi.Reactions.Debug.Servers.Models.Unpacked.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                ChangeNotificationOpConverter.Singleton,
                ControlSignalNotificationOpConverter.Singleton,
                OpEnumConverter.Singleton,
                ReloadHeaderOpConverter.Singleton,
                ReloadItemOpConverter.Singleton,
                VersionsEnumConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ChangeNotificationOpConverter : JsonConverter<ChangeNotificationOp>
    {
        public override bool CanConvert(Type t) => t == typeof(ChangeNotificationOp);

        public override ChangeNotificationOp Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "d":
                    return ChangeNotificationOp.D;
                case "i":
                    return ChangeNotificationOp.I;
                case "u":
                    return ChangeNotificationOp.U;
            }
            throw new Exception("Cannot unmarshal type ChangeNotificationOp");
        }

        public override void Write(Utf8JsonWriter writer, ChangeNotificationOp value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case ChangeNotificationOp.D:
                    JsonSerializer.Serialize(writer, "d", options);
                    return;
                case ChangeNotificationOp.I:
                    JsonSerializer.Serialize(writer, "i", options);
                    return;
                case ChangeNotificationOp.U:
                    JsonSerializer.Serialize(writer, "u", options);
                    return;
            }
            throw new Exception("Cannot marshal type ChangeNotificationOp");
        }

        public static readonly ChangeNotificationOpConverter Singleton = new ChangeNotificationOpConverter();
    }

    internal class ControlSignalNotificationOpConverter : JsonConverter<ControlSignalNotificationOp>
    {
        public override bool CanConvert(Type t) => t == typeof(ControlSignalNotificationOp);

        public override ControlSignalNotificationOp Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "x")
            {
                return ControlSignalNotificationOp.X;
            }
            throw new Exception("Cannot unmarshal type ControlSignalNotificationOp");
        }

        public override void Write(Utf8JsonWriter writer, ControlSignalNotificationOp value, JsonSerializerOptions options)
        {
            if (value == ControlSignalNotificationOp.X)
            {
                JsonSerializer.Serialize(writer, "x", options);
                return;
            }
            throw new Exception("Cannot marshal type ControlSignalNotificationOp");
        }

        public static readonly ControlSignalNotificationOpConverter Singleton = new ControlSignalNotificationOpConverter();
    }

    internal class OpEnumConverter : JsonConverter<OpEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(OpEnum);

        public override OpEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "d":
                    return OpEnum.D;
                case "h":
                    return OpEnum.H;
                case "i":
                    return OpEnum.I;
                case "r":
                    return OpEnum.R;
                case "u":
                    return OpEnum.U;
                case "x":
                    return OpEnum.X;
            }
            throw new Exception("Cannot unmarshal type OpEnum");
        }

        public override void Write(Utf8JsonWriter writer, OpEnum value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case OpEnum.D:
                    JsonSerializer.Serialize(writer, "d", options);
                    return;
                case OpEnum.H:
                    JsonSerializer.Serialize(writer, "h", options);
                    return;
                case OpEnum.I:
                    JsonSerializer.Serialize(writer, "i", options);
                    return;
                case OpEnum.R:
                    JsonSerializer.Serialize(writer, "r", options);
                    return;
                case OpEnum.U:
                    JsonSerializer.Serialize(writer, "u", options);
                    return;
                case OpEnum.X:
                    JsonSerializer.Serialize(writer, "x", options);
                    return;
            }
            throw new Exception("Cannot marshal type OpEnum");
        }

        public static readonly OpEnumConverter Singleton = new OpEnumConverter();
    }

    internal class ReloadHeaderOpConverter : JsonConverter<ReloadHeaderOp>
    {
        public override bool CanConvert(Type t) => t == typeof(ReloadHeaderOp);

        public override ReloadHeaderOp Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "h")
            {
                return ReloadHeaderOp.H;
            }
            throw new Exception("Cannot unmarshal type ReloadHeaderOp");
        }

        public override void Write(Utf8JsonWriter writer, ReloadHeaderOp value, JsonSerializerOptions options)
        {
            if (value == ReloadHeaderOp.H)
            {
                JsonSerializer.Serialize(writer, "h", options);
                return;
            }
            throw new Exception("Cannot marshal type ReloadHeaderOp");
        }

        public static readonly ReloadHeaderOpConverter Singleton = new ReloadHeaderOpConverter();
    }

    internal class ReloadItemOpConverter : JsonConverter<ReloadItemOp>
    {
        public override bool CanConvert(Type t) => t == typeof(ReloadItemOp);

        public override ReloadItemOp Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "r")
            {
                return ReloadItemOp.R;
            }
            throw new Exception("Cannot unmarshal type ReloadItemOp");
        }

        public override void Write(Utf8JsonWriter writer, ReloadItemOp value, JsonSerializerOptions options)
        {
            if (value == ReloadItemOp.R)
            {
                JsonSerializer.Serialize(writer, "r", options);
                return;
            }
            throw new Exception("Cannot marshal type ReloadItemOp");
        }

        public static readonly ReloadItemOpConverter Singleton = new ReloadItemOpConverter();
    }

    internal class VersionsEnumConverter : JsonConverter<VersionsEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(VersionsEnum);

        public override VersionsEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "v1")
            {
                return VersionsEnum.V1;
            }
            throw new Exception("Cannot unmarshal type VersionsEnum");
        }

        public override void Write(Utf8JsonWriter writer, VersionsEnum value, JsonSerializerOptions options)
        {
            if (value == VersionsEnum.V1)
            {
                JsonSerializer.Serialize(writer, "v1", options);
                return;
            }
            throw new Exception("Cannot marshal type VersionsEnum");
        }

        public static readonly VersionsEnumConverter Singleton = new VersionsEnumConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
