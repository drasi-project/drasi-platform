apiVersion: v1
kind: ConfigMap
metadata:
  name: test-data-init
data:
  init.sql: >
    CREATE TABLE "Item" (
        "ItemId" integer NOT NULL,
        "Name" character varying(100) NOT NULL,
        "Category" character varying(10) NOT NULL
    );

    ALTER TABLE "Item" ADD CONSTRAINT pk_item
      PRIMARY KEY ("ItemId");

    INSERT INTO "Item" ("ItemId", "Name", "Category") VALUES (1, 'Foo', '1');
    INSERT INTO "Item" ("ItemId", "Name", "Category") VALUES (2, 'Foo', '1');
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-pg-config
  labels:
    app: postgres
data:
  POSTGRES_DB: test-db
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          args: ["-c", "wal_level=logical"]
          volumeMounts:
          - name: init
            mountPath: "/docker-entrypoint-initdb.d"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: test-pg-config
      volumes:
        - name: init
          configMap:
            name: test-data-init
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
   - port: 5432
  selector:
   app: postgres
---
apiVersion: v1
kind: Source
name: test-source
spec:
  kind: PostgreSQL
  properties:
    host: postgres.default.svc.cluster.local
    port: 5432
    user: test
    password: test
    database: test-db
    ssl: false
    tables:
      - public.Item
---
apiVersion: v1
kind: ContinuousQuery
name: query1
spec:
  mode: query
  sources:    
    subscriptions:
      - id: test-source
  query: > 
    MATCH 
      (i:Item {Category: '1'})
    RETURN 
      i.ItemId AS Id, 
      i.Name as Name,
      i.Category as Category