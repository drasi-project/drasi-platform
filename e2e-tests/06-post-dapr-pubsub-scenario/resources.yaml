# PostgreSQL ConfigMap for Initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: pubsub-test-db-init
  namespace: default
data:
  init.sql: |
    CREATE ROLE replication_group;
    CREATE ROLE replication_user REPLICATION LOGIN;
    GRANT replication_group TO testuser;
    GRANT replication_group TO replication_user;

    CREATE TABLE product (
        product_id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price DECIMAL(10, 2)
    );
    
    ALTER TABLE product OWNER TO replication_group;

    INSERT INTO product (name, description, price) VALUES
    ('Laptop', 'High-performance laptop', 1200.00),
    ('Mouse', 'Ergonomic wireless mouse', 25.00);
    
    -- Create a publication for the product table
    CREATE PUBLICATION product_publication FOR TABLE product;
    
    -- Create a replication slot
    SELECT pg_create_logical_replication_slot('product_slot', 'pgoutput');
---
# PostgreSQL Secret for Credentials
apiVersion: v1
kind: Secret
metadata:
  name: pubsub-test-db-credentials
  namespace: default
type: Opaque
stringData:
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpassword
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pubsub-test-db
  namespace: default
spec:
  serviceName: pubsub-test-db
  replicas: 1
  selector:
    matchLabels:
      app: pubsub-test-db
  template:
    metadata:
      labels:
        app: pubsub-test-db
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: pubsub-test-db-credentials
        env:
        - name: POSTGRES_DB
          value: testdb
        args:
        - -c
        - wal_level=logical
        - -c
        - max_replication_slots=5
        - -c
        - max_wal_senders=10
        volumeMounts:
        - name: product-db-data
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "0.5"
            memory: "512Mi"
      volumes:
      - name: product-db-data
        emptyDir: {}
      - name: init-script
        configMap:
          name: pubsub-test-db-init
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: pubsub-test-db
  namespace: default
spec:
  ports:
  - port: 5432
  selector:
    app: pubsub-test-db
---
# Redis Deployment for Dapr Pub/Sub
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-pubsub-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dapr-pubsub-redis
  template:
    metadata:
      labels:
        app: dapr-pubsub-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.1"
            memory: "256Mi"
---
# Redis Service for Dapr Pub/Sub
apiVersion: v1
kind: Service
metadata:
  name: dapr-pubsub-redis-svc
  namespace: default
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: dapr-pubsub-redis
---
# Dapr Pub/Sub Component in drasi-system Namespace
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: drasitest-pubsub
  namespace: drasi-system
spec:
  type: pubsub.redis
  version: v1
  metadata:
  - name: redisHost
    value: dapr-pubsub-redis-svc.default.svc.cluster.local:6379
  - name: redisPassword
    value: ""